{"version":3,"file":"static/js/389.99267202.chunk.js","mappings":"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","sources":["components/CodeView/index.tsx","components/demoView/index.tsx","pages/demoPage/index.tsx","components/richEditor/index.tsx","pages/richEditor/index.tsx","type/BaseComponent.ts","../node_modules/prettier|sync"],"sourcesContent":["import \"code-prettify\";\r\nimport \"code-prettify/src/prettify.css\";\r\n\r\nimport parserTypeScript from 'prettier/parser-typescript';\r\nimport prettier from 'prettier/standalone';\r\nimport parserHtml from \"prettier/parser-html\";\r\nimport {Component, createRef, CSSProperties, RefObject} from \"react\";\r\nimport \"./index.scss\";\r\nimport classNames from \"classnames\";\r\n\r\ninterface CodeViewProps {\r\n  children: string\r\n  className?: string\r\n  style?: CSSProperties\r\n  language?: \"ts\" | \"html\"\r\n  defaultShow?: boolean\r\n  canHidden?: boolean\r\n}\r\n\r\n\r\ninterface CodeViewState {\r\n  isShowCode: boolean\r\n}\r\n\r\nexport class CodeView extends Component<CodeViewProps, CodeViewState> {\r\n\r\n  private readonly codeViewAreaRef: RefObject<HTMLDivElement>\r\n  private areaMaxHeight: string\r\n\r\n  static defaultProps: CodeViewProps = {\r\n    children: \"\",\r\n    language: \"ts\",\r\n    canHidden: false\r\n  }\r\n\r\n  constructor(props: CodeViewProps | Readonly<CodeViewProps>) {\r\n    super(props);\r\n    this.state = {\r\n      isShowCode: true\r\n    }\r\n    this.codeViewAreaRef = createRef<HTMLDivElement>();\r\n    this.areaMaxHeight = \"fit-content\"\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    (window as any).PR.prettyPrint();\r\n  }\r\n\r\n  componentDidMount() {\r\n    (window as any).PR.prettyPrint();\r\n    this.areaMaxHeight = this.codeViewAreaRef.current?.clientHeight + \"px\" || \"fit-content\"\r\n    this.setState({\r\n      isShowCode: !this.props.canHidden || !!this.props.defaultShow\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let result = \"\";\r\n    try {\r\n      result = prettier.format(this.props.children, {\r\n        parser: \"typescript\",\r\n        plugins: [parserTypeScript, parserHtml]\r\n      });\r\n    } catch (e) {\r\n      console.error(\"代码格式有误，无法解析\")\r\n      result = this.props.children\r\n    }\r\n\r\n    let className = classNames(\r\n      \"lg-code-view-root\",\r\n      {\r\n        [`${this.props.className}`]: !!this.props.className,\r\n        \"lg-code-view-can-hidden\": this.props.canHidden\r\n      }\r\n    )\r\n\r\n    return (\r\n      <div className={className} style={this.props.style}>\r\n        <div ref={this.codeViewAreaRef} className=\"lg-code-view-area\"\r\n             style={{height: this.state.isShowCode ? this.areaMaxHeight : \"0\"}}>\r\n          <pre className={`prettyprint lang-js`}>\r\n              <div className=\"code_block\">\r\n                <code className=\"code_text\">{result}</code>\r\n              </div>\r\n          </pre>\r\n        </div>\r\n        {\r\n          !this.props.canHidden ? \"\" :\r\n            <div onClick={() => this.setState({isShowCode: !this.state.isShowCode})}\r\n                 className=\"lg-code-view-show-button\">\r\n              <div className={`lg-code-view-show-text ${this.state.isShowCode ? \"on-show\" : \"\"}`}>\r\n                {!this.state.isShowCode ? \"显示\" : \"隐藏\"}代码\r\n              </div>\r\n            </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import \"./index.scss\"\r\nimport {BaseComponent} from \"../../type/BaseComponent\";\r\nimport classNames from \"classnames\";\r\nimport { BaseProps } from \"../../type/BaseProps\";\r\nimport {CodeView} from \"@/components/CodeView\";\r\n\r\n\r\nexport interface DemoViewProps {\r\n  title: string\r\n  subtitle?: string\r\n  code?: string\r\n}\r\n\r\nexport class DemoView extends BaseComponent<DemoViewProps> {\r\n\r\n  private readonly classNamePrefix: string\r\n\r\n  constructor(props: (DemoViewProps & BaseProps) | Readonly<DemoViewProps & BaseProps>) {\r\n    super(props);\r\n    this.classNamePrefix = \"lg-demo-view\"\r\n  }\r\n\r\n  render() {\r\n    let className = classNames(\r\n      `${this.classNamePrefix}-root`,\r\n      {\r\n        [`${this.props.className}`]: !!this.props.className\r\n      }\r\n    )\r\n    return (\r\n      <div className={className} style={this.props.style}>\r\n        <div className={`${this.classNamePrefix}-title`}>{this.props.title}</div>\r\n        {\r\n          !this.props.subtitle ? \"\" :\r\n            <div className={`${this.classNamePrefix}-subtitle`}>{this.props.subtitle}</div>\r\n        }\r\n        <div className={`${this.classNamePrefix}-component-area`}>\r\n          {\r\n            this.props.children\r\n          }\r\n        </div>\r\n        {\r\n          !this.props.code? \"\":\r\n            <CodeView canHidden={true}>{this.props.code}</CodeView>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}","import {BaseComponent} from \"../../type/BaseComponent\";\r\nimport {BaseProps} from \"../../type/BaseProps\";\r\nimport classNames from \"classnames\";\r\nimport \"./index.scss\"\r\nimport {CodeView} from \"@/components/CodeView\";\r\n\r\nexport interface DemoPageProps {\r\n  title: string\r\n  subtitle?: string\r\n  importCode?: string\r\n  interfaceCode?: string\r\n}\r\n\r\n\r\nexport class DemoPage extends BaseComponent<DemoPageProps> {\r\n\r\n  private readonly classNamePrefix: string\r\n\r\n  constructor(props: (DemoPageProps & BaseProps) | Readonly<DemoPageProps & BaseProps>) {\r\n    super(props);\r\n    this.classNamePrefix = \"lg-demo-page\"\r\n  }\r\n\r\n  render() {\r\n\r\n    const className = classNames(\r\n      `${this.classNamePrefix}-root`,\r\n      {\r\n        [`${this.props.className}`]: !!this.props.className\r\n      }\r\n    )\r\n\r\n    return (\r\n      <div className={className}>\r\n        <div className={`${this.classNamePrefix}-header`}>\r\n          <div className={`${this.classNamePrefix}-title`}>{this.props.title}</div>\r\n          {\r\n            !this.props.subtitle ? \"\" :\r\n              < div className={`${this.classNamePrefix}-subtitle`}>{this.props.subtitle}</div>\r\n          }\r\n          {\r\n            !this.props.importCode ? \"\" : (\r\n              <div className={`${this.classNamePrefix}-import`}>\r\n                <div className={`${this.classNamePrefix}-import-title`}>在页面中引入组件</div>\r\n                <CodeView>\r\n                  {this.props.importCode}\r\n                </CodeView>\r\n              </div>\r\n            )\r\n\r\n          }\r\n        </div>\r\n        <div className={`${this.classNamePrefix}-body`}>\r\n          {\r\n            this.props.children\r\n          }\r\n        </div>\r\n        <div className={`${this.classNamePrefix}-footer`}>\r\n          {\r\n            !this.props.interfaceCode ? \"\" : (\r\n              <div className={`${this.classNamePrefix}-interface`}>\r\n                <div className={`${this.classNamePrefix}-interface-title`}>标签属性解析</div>\r\n                <CodeView>\r\n                  {this.props.interfaceCode}\r\n                </CodeView>\r\n              </div>\r\n            )\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import \"./index.scss\"\r\nimport {BaseProps} from \"../../type/BaseProps\";\r\nimport ReactWEditor from 'wangeditor-for-react';\r\nimport {ReactWEProps} from \"wangeditor-for-react/src/type\";\r\n\r\nexport const LgRichEditor = (props: ReactWEProps & BaseProps) => {\r\n  return(\r\n    <div className={props.className} style={props.style}>\r\n      <ReactWEditor {...props} />\r\n    </div>\r\n  )\r\n}","import {Component} from \"react\";\r\nimport {LgRichEditor} from \"@/components/richEditor\";\r\nimport \"./index.scss\"\r\nimport {DemoPage} from \"../demoPage\";\r\nimport {LgBreadcrumb} from \"@/components/breadcrumb\";\r\nimport {DemoView} from \"@/components/demoView\";\r\n\r\nexport default class Index extends Component {\r\n  render() {\r\n    return (\r\n      <DemoPage title=\"G014富文本编辑器\" className=\"lg-rich-editor-demo\"\r\n                importCode={`\r\n                    import {LgRichEditor} from \"@/components/richEditor\";\r\n                `}\r\n                interfaceCode={`\r\n                      interface LgRichEditorProps {\r\n                          config?: Partial<ConfigType>; //配置项，详情请看ConfigType\r\n                          \r\n                          defaultValue?: string;  // 组件初始化时的value\r\n                          localBlobImg?: boolean; // 图片替换为本地Blob伪URL\r\n                          placeholder?: string; //占位符\r\n                          value?: string;\r\n                          \r\n                          linkImgCallback?: (src: string, alt: string, href: string) => void; // 插入网络图片的回调事件\r\n                          onlineVideoCallback?: (video: unknown) => void; // 插入网络视频的回调事件\r\n                          onChange?: (html: string) => void;\r\n                          onBlur?: (html: string) => void;\r\n                          onFocus?: (html: string) => void;\r\n                      };\r\n                      \r\n                      //这里只列出部分功能，详细可以看https://www.wangeditor.com/doc/pages/02-%E5%86%85%E5%AE%B9%E5%A4%84%E7%90%86/\r\n                      interface ConfigType{\r\n                          height: number //编辑区域高度，默认为300px\r\n                          languageType: string[]\r\n                          languageTab: string\r\n                          menus: string[]  //设置菜单项，设置菜单顺序\r\n                          excludeMenus: string[] //剔除菜单\r\n                          fontNames: FontStyleType\r\n                          lineHeights: string[]\r\n                          showMenuTooltips: boolean //设置菜单栏提示 隐藏菜单栏提示 编辑器的菜单栏提示\r\n                          indentation: IndentationType\r\n                          fontSizes: FontSizeConfType\r\n                          colors: string[]\r\n                          emotions: EmotionsType[]\r\n                          zIndex: number\r\n                          onchange: Function | null\r\n                          onfocus: Function\r\n                          onblur: Function\r\n                          onchangeTimeout: number\r\n                          pasteFilterStyle: boolean\r\n                          pasteIgnoreImg: boolean\r\n                          pasteTextHandle: Function\r\n                          styleWithCSS: boolean\r\n                          linkImgCallback: Function\r\n                          onSelectionChange: Function\r\n                      \r\n                          placeholder: string\r\n                          zIndexFullScreen: number\r\n                          showFullScreen: boolean\r\n                          showLinkImg: boolean //隐藏插入网络图片的功能 设置 editor.config.showLinkImg = false 即可隐藏插入网络图片的功能，即只保留上传本地图片。\r\n                          showLinkImgAlt: boolean\r\n                          showLinkImgHref: boolean // 配置超链接\r\n                          uploadImgAccept: string[] //限制类型\r\n                          uploadImgServer: string //配置上传的服务器接口\r\n                          uploadImgShowBase64: boolean // 使用 base64 格式保存图片\r\n                          uploadImgMaxSize: number //限制大小，比如2M 2 * 1024 * 1024\r\n                          uploadImgMaxLength: number //限制一次最多能传几张图片 默认为 100 张\r\n                          uploadFileName: string\r\n                          uploadImgParams: DicType\r\n                          uploadImgParamsWithUrl: boolean\r\n                          uploadImgHeaders: DicType\r\n                          uploadImgHooks: UploadImageHooksType\r\n                          uploadImgTimeout: number\r\n                          withCredentials: boolean\r\n                          customUploadImg: Function | null\r\n                          uploadImgFromMedia: Function | null\r\n                          customAlert: Function\r\n                      \r\n                          onCatalogChange: Function | null\r\n                      \r\n                          lang: string\r\n                          languages: typeof langConfig\r\n                      \r\n                          linkCheck: Function\r\n                          linkImgCheck: Function\r\n                          compatibleMode: () => boolean\r\n                          historyMaxSize: number\r\n                      \r\n                          focus: boolean\r\n                      \r\n                          onlineVideoCheck: Function\r\n                          onlineVideoCallback: Function\r\n                      \r\n                          showLinkVideo: Boolean\r\n                          uploadVideoAccept: string[] //限制视频类型\r\n                          uploadVideoServer: string //设置上传视频的服务器接口\r\n                          uploadVideoMaxSize: number //限制可以上传的视频大小\r\n                          uploadVideoName: string\r\n                          uploadVideoParams: DicType\r\n                          uploadVideoParamsWithUrl: boolean\r\n                          uploadVideoHeaders: DicType\r\n                          uploadVideoHooks: UploadVideoHooksType\r\n                          uploadVideoTimeout: number\r\n                          withVideoCredentials: boolean\r\n                          customUploadVideo: Function | null\r\n                          customInsertVideo: Function | null\r\n                      \r\n                          menuTooltipPosition: tooltipPositionType\r\n                      }\r\n              `}>\r\n        <DemoView title=\"富文本编辑器\"\r\n                  code={`\r\n                      <LgRichEditor config={{showLinkImg: false, showLinkVideo: false, uploadVideoServer: \"http://localhost:3000/api\", excludeMenus: ['video']}} />\r\n                  `}>\r\n          <LgRichEditor config={{\r\n            showLinkImg: false,\r\n            showLinkVideo: false,\r\n            uploadVideoServer: \"http://localhost:3000/api\",\r\n            excludeMenus: ['video'],\r\n            onlineVideoCallback: () => {\r\n            }\r\n          }}/>\r\n        </DemoView>\r\n\r\n      </DemoPage>\r\n    )\r\n  }\r\n}","import {Component} from \"react\";\r\nimport {BaseProps} from \"./BaseProps\";\r\n\r\nexport class BaseComponent<T = {}, S = {}, SS = any> extends Component<T & BaseProps, S, SS>{\r\n  constructor(props: (T & BaseProps) | Readonly<T & BaseProps>) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.onRef && this.props.onRef(this)\r\n  }\r\n}","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 26291;\nmodule.exports = webpackEmptyContext;"],"names":["CodeView","props","codeViewAreaRef","areaMaxHeight","state","isShowCode","createRef","window","PR","prettyPrint","this","current","clientHeight","setState","canHidden","defaultShow","result","prettier","children","parser","plugins","parserTypeScript","parserHtml","e","console","error","className","classNames","style","ref","height","onClick","Component","defaultProps","language","DemoView","classNamePrefix","title","subtitle","code","BaseComponent","DemoPage","importCode","interfaceCode","LgRichEditor","Index","config","showLinkImg","showLinkVideo","uploadVideoServer","excludeMenus","onlineVideoCallback","onRef","webpackEmptyContext","req","Error","keys","resolve","id","module","exports"],"sourceRoot":""}