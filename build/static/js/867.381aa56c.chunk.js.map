{"version":3,"file":"static/js/867.381aa56c.chunk.js","mappings":"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","sources":["components/CodeView/index.tsx","components/demoView/index.tsx","components/charts/index.tsx","pages/charts/index.tsx","pages/demoPage/index.tsx","type/BaseComponent.ts","../node_modules/prettier|sync"],"sourcesContent":["import \"code-prettify\";\r\nimport \"code-prettify/src/prettify.css\";\r\n\r\nimport parserTypeScript from 'prettier/parser-typescript';\r\nimport prettier from 'prettier/standalone';\r\nimport parserHtml from \"prettier/parser-html\";\r\nimport {Component, createRef, CSSProperties, RefObject} from \"react\";\r\nimport \"./index.scss\";\r\nimport classNames from \"classnames\";\r\n\r\ninterface CodeViewProps {\r\n  children: string\r\n  className?: string\r\n  style?: CSSProperties\r\n  language?: \"ts\" | \"html\"\r\n  defaultShow?: boolean\r\n  canHidden?: boolean\r\n}\r\n\r\n\r\ninterface CodeViewState {\r\n  isShowCode: boolean\r\n}\r\n\r\nexport class CodeView extends Component<CodeViewProps, CodeViewState> {\r\n\r\n  private readonly codeViewAreaRef: RefObject<HTMLDivElement>\r\n  private areaMaxHeight: string\r\n\r\n  static defaultProps: CodeViewProps = {\r\n    children: \"\",\r\n    language: \"ts\",\r\n    canHidden: false\r\n  }\r\n\r\n  constructor(props: CodeViewProps | Readonly<CodeViewProps>) {\r\n    super(props);\r\n    this.state = {\r\n      isShowCode: true\r\n    }\r\n    this.codeViewAreaRef = createRef<HTMLDivElement>();\r\n    this.areaMaxHeight = \"fit-content\"\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    (window as any).PR.prettyPrint();\r\n  }\r\n\r\n  componentDidMount() {\r\n    (window as any).PR.prettyPrint();\r\n    this.areaMaxHeight = this.codeViewAreaRef.current?.clientHeight + \"px\" || \"fit-content\"\r\n    this.setState({\r\n      isShowCode: !this.props.canHidden || !!this.props.defaultShow\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let result = \"\";\r\n    try {\r\n      result = prettier.format(this.props.children, {\r\n        parser: \"typescript\",\r\n        plugins: [parserTypeScript, parserHtml]\r\n      });\r\n    } catch (e) {\r\n      console.error(\"代码格式有误，无法解析\")\r\n      result = this.props.children\r\n    }\r\n\r\n    let className = classNames(\r\n      \"lg-code-view-root\",\r\n      {\r\n        [`${this.props.className}`]: !!this.props.className,\r\n        \"lg-code-view-can-hidden\": this.props.canHidden\r\n      }\r\n    )\r\n\r\n    return (\r\n      <div className={className} style={this.props.style}>\r\n        <div ref={this.codeViewAreaRef} className=\"lg-code-view-area\"\r\n             style={{height: this.state.isShowCode ? this.areaMaxHeight : \"0\"}}>\r\n          <pre className={`prettyprint lang-js`}>\r\n              <div className=\"code_block\">\r\n                <code className=\"code_text\">{result}</code>\r\n              </div>\r\n          </pre>\r\n        </div>\r\n        {\r\n          !this.props.canHidden ? \"\" :\r\n            <div onClick={() => this.setState({isShowCode: !this.state.isShowCode})}\r\n                 className=\"lg-code-view-show-button\">\r\n              <div className={`lg-code-view-show-text ${this.state.isShowCode ? \"on-show\" : \"\"}`}>\r\n                {!this.state.isShowCode ? \"显示\" : \"隐藏\"}代码\r\n              </div>\r\n            </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import \"./index.scss\"\r\nimport {BaseComponent} from \"../../type/BaseComponent\";\r\nimport classNames from \"classnames\";\r\nimport { BaseProps } from \"../../type/BaseProps\";\r\nimport {CodeView} from \"@/components/CodeView\";\r\n\r\n\r\nexport interface DemoViewProps {\r\n  title: string\r\n  subtitle?: string\r\n  code?: string\r\n}\r\n\r\nexport class DemoView extends BaseComponent<DemoViewProps> {\r\n\r\n  private readonly classNamePrefix: string\r\n\r\n  constructor(props: (DemoViewProps & BaseProps) | Readonly<DemoViewProps & BaseProps>) {\r\n    super(props);\r\n    this.classNamePrefix = \"lg-demo-view\"\r\n  }\r\n\r\n  render() {\r\n    let className = classNames(\r\n      `${this.classNamePrefix}-root`,\r\n      {\r\n        [`${this.props.className}`]: !!this.props.className\r\n      }\r\n    )\r\n    return (\r\n      <div className={className} style={this.props.style}>\r\n        <div className={`${this.classNamePrefix}-title`}>{this.props.title}</div>\r\n        {\r\n          !this.props.subtitle ? \"\" :\r\n            <div className={`${this.classNamePrefix}-subtitle`}>{this.props.subtitle}</div>\r\n        }\r\n        <div className={`${this.classNamePrefix}-component-area`}>\r\n          {\r\n            this.props.children\r\n          }\r\n        </div>\r\n        {\r\n          !this.props.code? \"\":\r\n            <CodeView canHidden={true}>{this.props.code}</CodeView>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}","import { Component } from \"react\";\r\nimport \"./index.scss\";\r\nimport ReactEcharts from 'echarts-for-react'\r\nimport { EChartsReactProps} from \"echarts-for-react\";\r\n\r\nexport class LgCharts extends Component<EChartsReactProps, {}>{\r\n    render() {\r\n        return (\r\n            <ReactEcharts {...this.props}/>\r\n        )\r\n    }\r\n}","import { Component } from \"react\";\r\nimport { LgCharts } from \"@/components/charts\";\r\nimport { CodeView } from \"@/components/CodeView\";\r\nimport * as echarts from 'echarts';\r\n\r\n\r\nimport \"./index.scss\";\r\nimport \"../index.scss\";\r\nimport { DemoView } from \"@/components/demoView\";\r\nimport { LgBreadcrumb } from \"@/components/breadcrumb\";\r\nimport { DemoPage } from \"../demoPage\";\r\n\r\nexport default class Charts extends Component<{}, {}> {\r\n  getChartOptions1() {\r\n    return {\r\n      xAxis: {\r\n        type: \"category\",\r\n        data: [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\r\n        axisLabel: {\r\n          show: true,\r\n          textStyle: {\r\n            color: \"#999999\"   //这里用参数代替了\r\n          }\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: \"value\",\r\n        show: true,\r\n        axisLabel: {\r\n          show: true,\r\n          textStyle: {\r\n            color: \"#999999\"   //这里用参数代替了\r\n          }\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          data: [\r\n            120,\r\n            200,\r\n            150,\r\n            80,\r\n            70,\r\n            110,\r\n            130\r\n          ],\r\n          type: \"bar\"\r\n        }\r\n      ],\r\n      tooltip: {\r\n        axisPointer: {\r\n          type: \"cross\"\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  getChartOptions2() {\r\n    return {\r\n      xAxis: {\r\n        type: \"category\",\r\n        data: [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\r\n        axisLabel: {\r\n          show: true,\r\n          textStyle: {\r\n            color: \"#999999\"   //这里用参数代替了\r\n          }\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: \"value\",\r\n        axisLabel: {\r\n          show: true,\r\n          textStyle: {\r\n            color: \"#999999\"   //这里用参数代替了\r\n          }\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          data: [150, 230, 224, 218, 135, 147, 260],\r\n          type: \"line\"\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  getChartOptions3() {\r\n    let base = +new Date(2016, 9, 3);\r\n    let oneDay = 24 * 3600 * 1000;\r\n    let valueBase = Math.random() * 300;\r\n    let valueBase2 = Math.random() * 50;\r\n    let data = [];\r\n    let data2 = [];\r\n\r\n    for (var i = 1; i < 10; i++) {\r\n      var now = new Date((base += oneDay));\r\n      var dayStr = [now.getFullYear(), now.getMonth() + 1, now.getDate()].join(\"-\");\r\n\r\n      valueBase = Math.round((Math.random() - 0.5) * 20 + valueBase);\r\n      valueBase <= 0 && (valueBase = Math.random() * 300);\r\n      data.push([dayStr, valueBase]);\r\n\r\n      valueBase2 = Math.round((Math.random() - 0.5) * 20 + valueBase2);\r\n      valueBase2 <= 0 && (valueBase2 = Math.random() * 50);\r\n      data2.push([dayStr, valueBase2]);\r\n    }\r\n\r\n    return {\r\n      title: {\r\n        left: \"center\",\r\n        text: \"Tootip and dataZoom on Mobile Device\"\r\n      },\r\n      legend: {\r\n        top: \"bottom\",\r\n        data: [\"Intention\"]\r\n      },\r\n      tooltip: {\r\n        triggerOn: \"none\",\r\n        position: function(pt: any) {\r\n          return [pt[0], 130];\r\n        }\r\n      },\r\n      toolbox: {\r\n        left: \"center\",\r\n        itemSize: 25,\r\n        top: 55,\r\n        feature: {\r\n          dataZoom: {\r\n            yAxisIndex: \"none\"\r\n          },\r\n          restore: {}\r\n        }\r\n      },\r\n      xAxis: {\r\n        type: \"time\",\r\n        axisPointer: {\r\n          value: \"2016-10-7\",\r\n          snap: true,\r\n          lineStyle: {\r\n            color: \"#7581BD\",\r\n            width: 2\r\n          },\r\n          label: {\r\n            show: true,\r\n            formatter: function(params: any) {\r\n              return echarts.format.formatTime(\"yyyy-MM-dd\", params.value);\r\n            },\r\n            backgroundColor: \"#7581BD\"\r\n          },\r\n          handle: {\r\n            show: true,\r\n            color: \"#7581BD\"\r\n          }\r\n        },\r\n        splitLine: {\r\n          show: false\r\n        },\r\n        axisLabel: {\r\n          show: true,\r\n          textStyle: {\r\n            color: \"#999999\"   //这里用参数代替了\r\n          }\r\n        }\r\n      },\r\n      yAxis: {\r\n        type: \"value\",\r\n        axisTick: {\r\n          inside: true\r\n        },\r\n        splitLine: {\r\n          show: false\r\n        },\r\n        axisLabel: {\r\n          inside: true,\r\n          formatter: \"{value}\\n\",\r\n          show: true,\r\n          textStyle: {\r\n            color: \"#999999\"   //这里用参数代替了\r\n          }\r\n        },\r\n        z: 10\r\n      },\r\n      grid: {\r\n        top: 110,\r\n        left: 15,\r\n        right: 15,\r\n        height: 160\r\n      },\r\n      dataZoom: [\r\n        {\r\n          type: \"inside\",\r\n          throttle: 50\r\n        }\r\n      ],\r\n      series: [\r\n        {\r\n          name: \"Fake Data\",\r\n          type: \"line\",\r\n          smooth: true,\r\n          symbol: \"circle\",\r\n          symbolSize: 5,\r\n          sampling: \"average\",\r\n          itemStyle: {\r\n            color: \"#0770FF\"\r\n          },\r\n          stack: \"a\",\r\n          areaStyle: {\r\n            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n              {\r\n                offset: 0,\r\n                color: \"rgba(58,77,233,0.8)\"\r\n              },\r\n              {\r\n                offset: 1,\r\n                color: \"rgba(58,77,233,0.3)\"\r\n              }\r\n            ])\r\n          },\r\n          data: data\r\n        },\r\n        {\r\n          name: \"Fake Data\",\r\n          type: \"line\",\r\n          smooth: true,\r\n          stack: \"a\",\r\n          symbol: \"circle\",\r\n          symbolSize: 5,\r\n          sampling: \"average\",\r\n          itemStyle: {\r\n            color: \"#F2597F\"\r\n          },\r\n          areaStyle: {\r\n            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n              {\r\n                offset: 0,\r\n                color: \"rgba(213,72,120,0.8)\"\r\n              },\r\n              {\r\n                offset: 1,\r\n                color: \"rgba(213,72,120,0.3)\"\r\n              }\r\n            ])\r\n          },\r\n          data: data2\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  getChartOptions4() {\r\n    return {\r\n      title: {\r\n        text: \"Referer of a Website\",\r\n        subtext: \"Fake Data\",\r\n        left: \"center\"\r\n      },\r\n      tooltip: {\r\n        trigger: \"item\"\r\n      },\r\n      legend: {\r\n        orient: \"vertical\",\r\n        left: \"left\"\r\n      },\r\n      series: [\r\n        {\r\n          name: \"Access From\",\r\n          type: \"pie\",\r\n          radius: [\"40%\", \"70%\"],\r\n          data: [\r\n            { value: 1048, name: \"Search Engine\" },\r\n            { value: 735, name: \"Direct\" },\r\n            { value: 580, name: \"Email\" },\r\n            { value: 484, name: \"Union Ads\" },\r\n            { value: 300, name: \"Video Ads\" }\r\n          ],\r\n          emphasis: {\r\n            itemStyle: {\r\n              shadowBlur: 10,\r\n              shadowOffsetX: 0,\r\n              shadowColor: \"rgba(0, 0, 0, 0.5)\"\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    };\r\n    ;\r\n  }\r\n\r\n  getChartOptions5() {\r\n    return {\r\n      angleAxis: {\r\n        type: \"category\",\r\n        data: [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]\r\n      },\r\n      radiusAxis: {},\r\n      polar: {},\r\n      series: [\r\n        {\r\n          type: \"bar\",\r\n          data: [1, 2, 3, 4, 3, 5, 1],\r\n          coordinateSystem: \"polar\",\r\n          name: \"A\",\r\n          stack: \"a\",\r\n          emphasis: {\r\n            focus: \"series\"\r\n          }\r\n        },\r\n        {\r\n          type: \"bar\",\r\n          data: [2, 4, 6, 1, 3, 2, 1],\r\n          coordinateSystem: \"polar\",\r\n          name: \"B\",\r\n          stack: \"a\",\r\n          emphasis: {\r\n            focus: \"series\"\r\n          }\r\n        },\r\n        {\r\n          type: \"bar\",\r\n          data: [1, 2, 3, 4, 1, 2, 5],\r\n          coordinateSystem: \"polar\",\r\n          name: \"C\",\r\n          stack: \"a\",\r\n          emphasis: {\r\n            focus: \"series\"\r\n          }\r\n        }\r\n      ],\r\n      legend: {\r\n        show: true,\r\n        data: [\"A\", \"B\", \"C\"]\r\n      }\r\n    };\r\n  }\r\n\r\n  getChartOptions6() {\r\n    return {\r\n      title: {\r\n        text: \"Basic Radar Chart\"\r\n      },\r\n      legend: {\r\n        data: [\"Allocated Budget\", \"Actual Spending\"]\r\n      },\r\n      radar: {\r\n        // shape: 'circle',\r\n        indicator: [\r\n          { name: \"Sales\", max: 6500 },\r\n          { name: \"Administration\", max: 16000 },\r\n          { name: \"Information Technology\", max: 30000 },\r\n          { name: \"Customer Support\", max: 38000 },\r\n          { name: \"Development\", max: 52000 },\r\n          { name: \"Marketing\", max: 25000 }\r\n        ]\r\n      },\r\n      series: [\r\n        {\r\n          name: \"Budget vs spending\",\r\n          type: \"radar\",\r\n          data: [\r\n            {\r\n              value: [4200, 3000, 20000, 35000, 50000, 18000],\r\n              name: \"Allocated Budget\"\r\n            },\r\n            {\r\n              value: [5000, 14000, 28000, 26000, 42000, 21000],\r\n              name: \"Actual Spending\"\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  getChartOptions7() {\r\n    return {\r\n      xAxis: {},\r\n      yAxis: {},\r\n      series: [\r\n        {\r\n          symbolSize: 20,\r\n          data: [\r\n            [10.0, 8.04],\r\n            [8.07, 6.95],\r\n            [13.0, 7.58],\r\n            [9.05, 8.81],\r\n            [11.0, 8.33],\r\n            [14.0, 7.66],\r\n            [13.4, 6.81],\r\n            [10.0, 6.33],\r\n            [14.0, 8.96],\r\n            [12.5, 6.82],\r\n            [9.15, 7.2],\r\n            [11.5, 7.2],\r\n            [3.03, 4.23],\r\n            [12.2, 7.83],\r\n            [2.02, 4.47],\r\n            [1.05, 3.33],\r\n            [4.05, 4.96],\r\n            [6.03, 7.24],\r\n            [12.0, 6.26],\r\n            [12.0, 8.84],\r\n            [7.08, 5.82],\r\n            [5.02, 5.68]\r\n          ],\r\n          type: \"scatter\"\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <DemoPage title=\"G002图表\" className=\"lg_pages_container\"\r\n                importCode={`\r\n                        import { LgCharts } from \"@/components/charts\";\r\n                    `}\r\n                interfaceCode={`\r\n                        /* 具体参照echarts官方文档：https://echarts.apache.org/zh/api.html#echarts  */\r\n                `}>\r\n        <DemoView title=\"平面柱状图\" code={`\r\n                            /* 平面柱状图 */\r\n                            const options1 = {\r\n                                xAxis: {\r\n                                    type: 'category',\r\n                                    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\r\n                                },\r\n                                yAxis: {\r\n                                    type: 'value'\r\n                                },\r\n                                series: [\r\n                                    {\r\n                                        data: [\r\n                                            120,\r\n                                            {\r\n                                                value: 200,\r\n                                                itemStyle: {\r\n                                                    color: '#a90000'\r\n                                                }\r\n                                            },\r\n                                            150,\r\n                                            80,\r\n                                            70,\r\n                                            110,\r\n                                            130\r\n                                        ],\r\n                                        type: 'bar'\r\n                                    }\r\n                                ]\r\n                            };\r\n                            <LgCharts\r\n                                option={this.getChartOptions1()}      // option：图表配置项\r\n                                notMerge={true}\r\n                                lazyUpdate={true}\r\n                                style={{ height: '300px' }}\r\n                            />\r\n                    `}>\r\n          <LgCharts\r\n            option={this.getChartOptions1()}      // option：图表配置项\r\n            notMerge={true}\r\n            lazyUpdate={true}\r\n            style={{ height: \"300px\" }}\r\n          />\r\n        </DemoView>\r\n        <DemoView title=\"直角曲线图\" code={`\r\n                        /* 直角曲线图 */\r\n                        const options2 = {\r\n                            xAxis: {\r\n                                type: 'category',\r\n                                data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\r\n                            },\r\n                            yAxis: {\r\n                                type: 'value'\r\n                            },\r\n                            series: [\r\n                                {\r\n                                    data: [150, 230, 224, 218, 135, 147, 260],\r\n                                    type: 'line'\r\n                                }\r\n                            ]\r\n                        };\r\n                        <LgCharts\r\n                            option={this.getChartOptions2()}      // option：图表配置项\r\n                            notMerge={true}\r\n                            lazyUpdate={true}\r\n                            style={{ height: '300px' }}\r\n                        />\r\n                    `}>\r\n          <LgCharts\r\n            option={this.getChartOptions2()}      // option：图表配置项\r\n            notMerge={true}\r\n            lazyUpdate={true}\r\n            style={{ height: \"300px\" }}\r\n          />\r\n        </DemoView>\r\n\r\n        <DemoView title=\"圆弧曲线图\" code={`\r\n        \r\n                        /* 圆弧曲线图 */\r\n                        let base = +new Date(2016, 9, 3);\r\n                        let oneDay = 24 * 3600 * 1000;\r\n                        let valueBase = Math.random() * 300;\r\n                        let valueBase2 = Math.random() * 50;\r\n                        let data = [];\r\n                        let data2 = [];\r\n\r\n                        for (var i = 1; i < 10; i++) {\r\n                            var now = new Date((base += oneDay));\r\n                            var dayStr = [now.getFullYear(), now.getMonth() + 1, now.getDate()].join('-');\r\n\r\n                            valueBase = Math.round((Math.random() - 0.5) * 20 + valueBase);\r\n                            valueBase <= 0 && (valueBase = Math.random() * 300);\r\n                            data.push([dayStr, valueBase]);\r\n\r\n                            valueBase2 = Math.round((Math.random() - 0.5) * 20 + valueBase2);\r\n                            valueBase2 <= 0 && (valueBase2 = Math.random() * 50);\r\n                            data2.push([dayStr, valueBase2]);\r\n                        };\r\n                        \r\n                        const options3 = {\r\n                            title: {\r\n                                left: 'center',\r\n                                text: 'Tootip and dataZoom on Mobile Device'\r\n                            },\r\n                            legend: {\r\n                                top: 'bottom',\r\n                                data: ['Intention']\r\n                            },\r\n                            tooltip: {\r\n                                triggerOn: 'none',\r\n                                position: function (pt: any) {\r\n                                    return [pt[0], 130];\r\n                                }\r\n                            },\r\n                            toolbox: {\r\n                                left: 'center',\r\n                                itemSize: 25,\r\n                                top: 55,\r\n                                feature: {\r\n                                    dataZoom: {\r\n                                        yAxisIndex: 'none'\r\n                                    },\r\n                                    restore: {}\r\n                                }\r\n                            },\r\n                            xAxis: {\r\n                                type: 'time',\r\n                                axisPointer: {\r\n                                    value: '2016-10-7',\r\n                                    snap: true,\r\n                                    lineStyle: {\r\n                                        color: '#7581BD',\r\n                                        width: 2\r\n                                    },\r\n                                    label: {\r\n                                        show: true,\r\n                                        formatter: function (params: any) {\r\n                                            return echarts.format.formatTime('yyyy-MM-dd', params.value);\r\n                                        },\r\n                                        backgroundColor: '#7581BD'\r\n                                    },\r\n                                    handle: {\r\n                                        show: true,\r\n                                        color: '#7581BD'\r\n                                    }\r\n                                },\r\n                                splitLine: {\r\n                                    show: false\r\n                                }\r\n                            },\r\n                            yAxis: {\r\n                                type: 'value',\r\n                                axisTick: {\r\n                                    inside: true\r\n                                },\r\n                                splitLine: {\r\n                                    show: false\r\n                                },\r\n                                axisLabel: {\r\n                                    inside: true,\r\n                                    formatter: '{value}\\\\n'\r\n                                },\r\n                                z: 10\r\n                            },\r\n                            grid: {\r\n                                top: 110,\r\n                                left: 15,\r\n                                right: 15,\r\n                                height: 160\r\n                            },\r\n                            dataZoom: [\r\n                                {\r\n                                    type: 'inside',\r\n                                    throttle: 50\r\n                                }\r\n                            ],\r\n                            series: [\r\n                                {\r\n                                    name: 'Fake Data',\r\n                                    type: 'line',\r\n                                    smooth: true,\r\n                                    symbol: 'circle',\r\n                                    symbolSize: 5,\r\n                                    sampling: 'average',\r\n                                    itemStyle: {\r\n                                        color: '#0770FF'\r\n                                    },\r\n                                    stack: 'a',\r\n                                    areaStyle: {\r\n                                        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n                                            {\r\n                                                offset: 0,\r\n                                                color: 'rgba(58,77,233,0.8)'\r\n                                            },\r\n                                            {\r\n                                                offset: 1,\r\n                                                color: 'rgba(58,77,233,0.3)'\r\n                                            }\r\n                                        ])\r\n                                    },\r\n                                    data: data\r\n                                },\r\n                                {\r\n                                    name: 'Fake Data',\r\n                                    type: 'line',\r\n                                    smooth: true,\r\n                                    stack: 'a',\r\n                                    symbol: 'circle',\r\n                                    symbolSize: 5,\r\n                                    sampling: 'average',\r\n                                    itemStyle: {\r\n                                        color: '#F2597F'\r\n                                    },\r\n                                    areaStyle: {\r\n                                        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n                                            {\r\n                                                offset: 0,\r\n                                                color: 'rgba(213,72,120,0.8)'\r\n                                            },\r\n                                            {\r\n                                                offset: 1,\r\n                                                color: 'rgba(213,72,120,0.3)'\r\n                                            }\r\n                                        ])\r\n                                    },\r\n                                    data: data2\r\n                                }\r\n                            ]\r\n                        };\r\n                        <LgCharts\r\n                            option={this.getChartOptions3()}      // option：图表配置项\r\n                            notMerge={true}\r\n                            lazyUpdate={true}\r\n                            style={{ height: '400px' }}\r\n                        />\r\n          `}>\r\n          <LgCharts\r\n            option={this.getChartOptions3()}      // option：图表配置项\r\n            notMerge={true}\r\n            lazyUpdate={true}\r\n            style={{ height: \"300px\" }}\r\n          />\r\n        </DemoView>\r\n\r\n        <DemoView title=\"饼状图\" code={`  \r\n                            /* 饼状图 */\r\n                            const options4 = {\r\n                                title: {\r\n                                    text: 'Referer of a Website',\r\n                                    subtext: 'Fake Data',\r\n                                    left: 'center'\r\n                                },\r\n                                tooltip: {\r\n                                    trigger: 'item'\r\n                                },\r\n                                legend: {\r\n                                    orient: 'vertical',\r\n                                    left: 'left'\r\n                                },\r\n                                series: [\r\n                                    {\r\n                                        name: 'Access From',\r\n                                        type: 'pie',\r\n                                        radius: ['40%', '70%'],\r\n                                        data: [\r\n                                            { value: 1048, name: 'Search Engine' },\r\n                                            { value: 735, name: 'Direct' },\r\n                                            { value: 580, name: 'Email' },\r\n                                            { value: 484, name: 'Union Ads' },\r\n                                            { value: 300, name: 'Video Ads' }\r\n                                        ],\r\n                                        emphasis: {\r\n                                            itemStyle: {\r\n                                                shadowBlur: 10,\r\n                                                shadowOffsetX: 0,\r\n                                                shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            };\r\n                            <LgCharts\r\n                                option={this.getChartOptions4()}      // option：图表配置项\r\n                                notMerge={true}\r\n                                lazyUpdate={true}\r\n                                style={{ height: '300px' }}\r\n                            />\r\n                        `}>\r\n          <LgCharts\r\n            option={this.getChartOptions4()}      // option：图表配置项\r\n            notMerge={true}\r\n            lazyUpdate={true}\r\n            style={{ height: \"300px\" }}\r\n          />\r\n        </DemoView>\r\n\r\n        <DemoView title=\"玫瑰图\" code={`\r\n                            /* 玫瑰图 */\r\n                            const options5 = {\r\n                                angleAxis: {\r\n                                    type: 'category',\r\n                                    data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\r\n                                },\r\n                                radiusAxis: {},\r\n                                polar: {},\r\n                                series: [\r\n                                    {\r\n                                        type: 'bar',\r\n                                        data: [1, 2, 3, 4, 3, 5, 1],\r\n                                        coordinateSystem: 'polar',\r\n                                        name: 'A',\r\n                                        stack: 'a',\r\n                                        emphasis: {\r\n                                            focus: 'series'\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        type: 'bar',\r\n                                        data: [2, 4, 6, 1, 3, 2, 1],\r\n                                        coordinateSystem: 'polar',\r\n                                        name: 'B',\r\n                                        stack: 'a',\r\n                                        emphasis: {\r\n                                            focus: 'series'\r\n                                        }\r\n                                    },\r\n                                    {\r\n                                        type: 'bar',\r\n                                        data: [1, 2, 3, 4, 1, 2, 5],\r\n                                        coordinateSystem: 'polar',\r\n                                        name: 'C',\r\n                                        stack: 'a',\r\n                                        emphasis: {\r\n                                            focus: 'series'\r\n                                        }\r\n                                    }\r\n                                ],\r\n                                legend: {\r\n                                    show: true,\r\n                                    data: ['A', 'B', 'C']\r\n                                }\r\n                            };\r\n                            <LgCharts\r\n                                option={this.getChartOptions5()}      // option：图表配置项\r\n                                notMerge={true}\r\n                                lazyUpdate={true}\r\n                                style={{ height: '300px' }}\r\n                            />\r\n                        `}>\r\n          <LgCharts\r\n            option={this.getChartOptions5()}      // option：图表配置项\r\n            notMerge={true}\r\n            lazyUpdate={true}\r\n            style={{ height: \"300px\" }}\r\n          />\r\n        </DemoView>\r\n\r\n        <DemoView title=\"雷达图\" code={`\r\n                            /* 雷达图 */\r\n                            const options6 = {\r\n                                title: {\r\n                                    text: 'Basic Radar Chart'\r\n                                },\r\n                                legend: {\r\n                                    data: ['Allocated Budget', 'Actual Spending']\r\n                                },\r\n                                radar: {\r\n                                    // shape: 'circle',\r\n                                    indicator: [\r\n                                        { name: 'Sales', max: 6500 },\r\n                                        { name: 'Administration', max: 16000 },\r\n                                        { name: 'Information Technology', max: 30000 },\r\n                                        { name: 'Customer Support', max: 38000 },\r\n                                        { name: 'Development', max: 52000 },\r\n                                        { name: 'Marketing', max: 25000 }\r\n                                    ]\r\n                                },\r\n                                series: [\r\n                                    {\r\n                                        name: 'Budget vs spending',\r\n                                        type: 'radar',\r\n                                        data: [\r\n                                            {\r\n                                                value: [4200, 3000, 20000, 35000, 50000, 18000],\r\n                                                name: 'Allocated Budget'\r\n                                            },\r\n                                            {\r\n                                                value: [5000, 14000, 28000, 26000, 42000, 21000],\r\n                                                name: 'Actual Spending'\r\n                                            }\r\n                                        ]\r\n                                    }\r\n                                ]\r\n                            };\r\n                            <LgCharts\r\n                                option={this.getChartOptions6()}      // option：图表配置项\r\n                                notMerge={true}\r\n                                lazyUpdate={true}\r\n                                style={{ height: '300px' }}\r\n                            />\r\n                        `}>\r\n          <LgCharts\r\n            option={this.getChartOptions6()}      // option：图表配置项\r\n            notMerge={true}\r\n            lazyUpdate={true}\r\n            style={{ height: \"300px\" }}\r\n          />\r\n        </DemoView>\r\n\r\n        <DemoView title=\"散点图\" code={`\r\n                            /* 散点图 */\r\n                            const options7 = {\r\n                                xAxis: {},\r\n                                yAxis: {},\r\n                                series: [\r\n                                    {\r\n                                        symbolSize: 20,\r\n                                        data: [\r\n                                            [10.0, 8.04],\r\n                                            [8.07, 6.95],\r\n                                            [13.0, 7.58],\r\n                                            [9.05, 8.81],\r\n                                            [11.0, 8.33],\r\n                                            [14.0, 7.66],\r\n                                            [13.4, 6.81],\r\n                                            [10.0, 6.33],\r\n                                            [14.0, 8.96],\r\n                                            [12.5, 6.82],\r\n                                            [9.15, 7.2],\r\n                                            [11.5, 7.2],\r\n                                            [3.03, 4.23],\r\n                                            [12.2, 7.83],\r\n                                            [2.02, 4.47],\r\n                                            [1.05, 3.33],\r\n                                            [4.05, 4.96],\r\n                                            [6.03, 7.24],\r\n                                            [12.0, 6.26],\r\n                                            [12.0, 8.84],\r\n                                            [7.08, 5.82],\r\n                                            [5.02, 5.68]\r\n                                        ],\r\n                                        type: 'scatter'\r\n                                    }\r\n                                ]\r\n                            };\r\n                            <LgCharts\r\n                                option={this.getChartOptions7()}      // option：图表配置项\r\n                                notMerge={true}\r\n                                lazyUpdate={true}\r\n                                style={{ height: '300px' }}\r\n                            />\r\n                        `}>\r\n          <LgCharts\r\n            option={this.getChartOptions7()}      // option：图表配置项\r\n            notMerge={true}\r\n            lazyUpdate={true}\r\n            style={{ height: \"300px\" }}\r\n          />\r\n        </DemoView>\r\n      </DemoPage>\r\n  )\r\n  }\r\n}","import {BaseComponent} from \"../../type/BaseComponent\";\r\nimport {BaseProps} from \"../../type/BaseProps\";\r\nimport classNames from \"classnames\";\r\nimport \"./index.scss\"\r\nimport {CodeView} from \"@/components/CodeView\";\r\n\r\nexport interface DemoPageProps {\r\n  title: string\r\n  subtitle?: string\r\n  importCode?: string\r\n  interfaceCode?: string\r\n}\r\n\r\n\r\nexport class DemoPage extends BaseComponent<DemoPageProps> {\r\n\r\n  private readonly classNamePrefix: string\r\n\r\n  constructor(props: (DemoPageProps & BaseProps) | Readonly<DemoPageProps & BaseProps>) {\r\n    super(props);\r\n    this.classNamePrefix = \"lg-demo-page\"\r\n  }\r\n\r\n  render() {\r\n\r\n    const className = classNames(\r\n      `${this.classNamePrefix}-root`,\r\n      {\r\n        [`${this.props.className}`]: !!this.props.className\r\n      }\r\n    )\r\n\r\n    return (\r\n      <div className={className}>\r\n        <div className={`${this.classNamePrefix}-header`}>\r\n          <div className={`${this.classNamePrefix}-title`}>{this.props.title}</div>\r\n          {\r\n            !this.props.subtitle ? \"\" :\r\n              < div className={`${this.classNamePrefix}-subtitle`}>{this.props.subtitle}</div>\r\n          }\r\n          {\r\n            !this.props.importCode ? \"\" : (\r\n              <div className={`${this.classNamePrefix}-import`}>\r\n                <div className={`${this.classNamePrefix}-import-title`}>在页面中引入组件</div>\r\n                <CodeView>\r\n                  {this.props.importCode}\r\n                </CodeView>\r\n              </div>\r\n            )\r\n\r\n          }\r\n        </div>\r\n        <div className={`${this.classNamePrefix}-body`}>\r\n          {\r\n            this.props.children\r\n          }\r\n        </div>\r\n        <div className={`${this.classNamePrefix}-footer`}>\r\n          {\r\n            !this.props.interfaceCode ? \"\" : (\r\n              <div className={`${this.classNamePrefix}-interface`}>\r\n                <div className={`${this.classNamePrefix}-interface-title`}>标签属性解析</div>\r\n                <CodeView>\r\n                  {this.props.interfaceCode}\r\n                </CodeView>\r\n              </div>\r\n            )\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import {Component} from \"react\";\r\nimport {BaseProps} from \"./BaseProps\";\r\n\r\nexport class BaseComponent<T = {}, S = {}, SS = any> extends Component<T & BaseProps, S, SS>{\r\n  constructor(props: (T & BaseProps) | Readonly<T & BaseProps>) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.onRef && this.props.onRef(this)\r\n  }\r\n}","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 26291;\nmodule.exports = webpackEmptyContext;"],"names":["CodeView","props","codeViewAreaRef","areaMaxHeight","state","isShowCode","createRef","window","PR","prettyPrint","this","current","clientHeight","setState","canHidden","defaultShow","result","prettier","children","parser","plugins","parserTypeScript","parserHtml","e","console","error","className","classNames","style","ref","height","onClick","Component","defaultProps","language","DemoView","classNamePrefix","title","subtitle","code","BaseComponent","LgCharts","Charts","xAxis","type","data","axisLabel","show","textStyle","color","yAxis","series","tooltip","axisPointer","base","Date","valueBase","Math","random","valueBase2","data2","i","now","dayStr","getFullYear","getMonth","getDate","join","round","push","left","text","legend","top","triggerOn","position","pt","toolbox","itemSize","feature","dataZoom","yAxisIndex","restore","value","snap","lineStyle","width","label","formatter","params","echarts","format","formatTime","backgroundColor","handle","splitLine","axisTick","inside","z","grid","right","throttle","name","smooth","symbol","symbolSize","sampling","itemStyle","stack","areaStyle","graphic","LinearGradient","offset","subtext","trigger","orient","radius","emphasis","shadowBlur","shadowOffsetX","shadowColor","angleAxis","radiusAxis","polar","coordinateSystem","focus","radar","indicator","max","importCode","interfaceCode","option","getChartOptions1","notMerge","lazyUpdate","getChartOptions2","getChartOptions3","getChartOptions4","getChartOptions5","getChartOptions6","getChartOptions7","DemoPage","onRef","webpackEmptyContext","req","Error","keys","resolve","id","module","exports"],"sourceRoot":""}