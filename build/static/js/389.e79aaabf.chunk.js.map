{"version":3,"file":"static/js/389.e79aaabf.chunk.js","mappings":"iSAgBaA,EAAb,sJAOE,SAAmBC,EAAyBC,EAAgDC,GACzFC,OAAeC,GAAGC,gBARvB,+BAWE,WACGF,OAAeC,GAAGC,gBAZvB,oBAeE,WACE,IAAIC,EAAS,GACb,IACEA,EAASC,IAAAA,OAAgBC,KAAKC,MAAMC,SAAU,CAC5CC,OAAQ,aACRC,QAAS,CAACC,IAAkBC,OAE9B,MAAOC,GACPC,QAAQC,MAAM,sEACdX,EAASE,KAAKC,MAAMC,SAEtB,OACE,gBAAKQ,UAAS,2CAAsCV,KAAKC,MAAMS,WAAa,IAAMC,MAAOX,KAAKC,MAAMU,MAApG,UACI,gBAAKD,UAAU,aAAf,UACE,iBAAMA,UAAU,YAAhB,SAA6BZ,YA7BzC,GAA8Bc,EAAAA,WAAjBrB,EAEJsB,aAA8B,CACnCX,SAAU,GACVY,SAAU,O,oLCfDC,EAAe,SAACd,GAC3B,OACE,gBAAKS,UAAWT,EAAMS,UAAWC,MAAOV,EAAMU,MAA9C,UACE,SAAC,KAAD,UAAkBV,O,SCFHe,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAwHhB,OAxHgBA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,SAAAA,MACjB,WACI,OACE,iBAAKN,UAAU,sBAAf,WACI,2FACA,SAACnB,EAAA,EAAD,CAAUmB,UAAU,YAApB,gHAMA,mEACA,SAACnB,EAAA,EAAD,onLAmGA,uDACA,SAACA,EAAA,EAAD,CAAUmB,UAAU,YAApB,oMAKF,SAACK,EAAD,CAAcE,OAAQ,CAACC,aAAa,EAAOC,eAAe,EAAOC,kBAAmB,4BAA6BC,aAAc,CAAC,SAAUC,oBAAqB,uBAGtK,EAxHgBN,CAAcJ,EAAAA,Y,kBCNnC,SAASW,EAAoBC,GAC5B,IAAIjB,EAAI,IAAIkB,MAAM,uBAAyBD,EAAM,KAEjD,MADAjB,EAAEmB,KAAO,mBACHnB,EAEPgB,EAAoBI,KAAO,WAAa,MAAO,IAC/CJ,EAAoBK,QAAUL,EAC9BA,EAAoBM,GAAK,MACzBC,EAAOC,QAAUR","sources":["components/CodeView/index.tsx","components/richEditor/index.tsx","pages/richEditor/index.tsx","../node_modules/prettier|sync"],"sourcesContent":["import \"code-prettify\";\r\nimport \"code-prettify/src/prettify.css\";\r\n\r\nimport parserTypeScript from 'prettier/parser-typescript';\r\nimport prettier from 'prettier/standalone';\r\nimport parserHtml from \"prettier/parser-html\";\r\nimport {Component, CSSProperties} from \"react\";\r\nimport \"./index.scss\";\r\n\r\ninterface CodeViewProps {\r\n  children: string\r\n  className?: string\r\n  style?: CSSProperties\r\n  language?: \"ts\" | \"html\"\r\n}\r\n\r\nexport class CodeView extends Component<CodeViewProps, {}> {\r\n\r\n  static defaultProps: CodeViewProps = {\r\n    children: \"\",\r\n    language: \"ts\"\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Readonly<{}>, prevState: Readonly<{ selectedIndex: number }>, snapshot?: any) {\r\n    (window as any).PR.prettyPrint();\r\n  }\r\n\r\n  componentDidMount() {\r\n    (window as any).PR.prettyPrint();\r\n  }\r\n\r\n  render() {\r\n    let result = \"\";\r\n    try {\r\n      result = prettier.format(this.props.children, {\r\n        parser: \"typescript\",\r\n        plugins: [parserTypeScript, parserHtml]\r\n      });\r\n    } catch (e) {\r\n      console.error(\"代码格式有误，无法解析\")\r\n      result = this.props.children\r\n    }\r\n    return (\r\n      <pre className={`lg-code-view prettyprint lang-js ${this.props.className || \"\"}`} style={this.props.style}>\r\n          <div className=\"code_block\">\r\n            <code className=\"code_text\">{result}</code>\r\n          </div>\r\n      </pre>\r\n    )\r\n  }\r\n}\r\n","import \"./index.scss\"\r\nimport {BaseProps} from \"../../type/BaseProps\";\r\nimport ReactWEditor from 'wangeditor-for-react';\r\nimport {ReactWEProps} from \"wangeditor-for-react/src/type\";\r\n\r\nexport const LgRichEditor = (props: ReactWEProps & BaseProps) => {\r\n  return(\r\n    <div className={props.className} style={props.style}>\r\n      <ReactWEditor {...props} />\r\n    </div>\r\n  )\r\n}","import {Component} from \"react\";\r\nimport {LgRichEditor} from \"@/components/richEditor\";\r\nimport \"./index.scss\"\r\nimport {CodeView} from \"@/components/CodeView\";\r\n\r\n\r\nexport default class Index extends Component{\r\n    render() {\r\n        return(\r\n          <div className=\"lg-rich-editor-demo\">\r\n              <div>在页面文件中引入组件</div>\r\n              <CodeView className=\"code-size\">\r\n                  {`\r\n                      import {LgRichEditor} from \"@/components/richEditor\";\r\n                  `}\r\n              </CodeView>\r\n\r\n              <div>标签属性详解</div>\r\n              <CodeView>{`\r\n                interface LgRichEditorProps {\r\n                    config?: Partial<ConfigType>; //配置项，详情请看ConfigType\r\n                    \r\n                    defaultValue?: string;  // 组件初始化时的value\r\n                    localBlobImg?: boolean; // 图片替换为本地Blob伪URL\r\n                    placeholder?: string; //占位符\r\n                    value?: string;\r\n                    \r\n                    linkImgCallback?: (src: string, alt: string, href: string) => void; // 插入网络图片的回调事件\r\n                    onlineVideoCallback?: (video: unknown) => void; // 插入网络视频的回调事件\r\n                    onChange?: (html: string) => void;\r\n                    onBlur?: (html: string) => void;\r\n                    onFocus?: (html: string) => void;\r\n                };\r\n                \r\n                \r\n                //这里只列出部分功能，详细可以看https://www.wangeditor.com/doc/pages/02-%E5%86%85%E5%AE%B9%E5%A4%84%E7%90%86/\r\n                interface ConfigType{\r\n                    height: number //编辑区域高度，默认为300px\r\n                    languageType: string[]\r\n                    languageTab: string\r\n                    menus: string[]  //设置菜单项，设置菜单顺序\r\n                    excludeMenus: string[] //剔除菜单\r\n                    fontNames: FontStyleType\r\n                    lineHeights: string[]\r\n                    showMenuTooltips: boolean //设置菜单栏提示 隐藏菜单栏提示 编辑器的菜单栏提示\r\n                    indentation: IndentationType\r\n                    fontSizes: FontSizeConfType\r\n                    colors: string[]\r\n                    emotions: EmotionsType[]\r\n                    zIndex: number\r\n                    onchange: Function | null\r\n                    onfocus: Function\r\n                    onblur: Function\r\n                    onchangeTimeout: number\r\n                    pasteFilterStyle: boolean\r\n                    pasteIgnoreImg: boolean\r\n                    pasteTextHandle: Function\r\n                    styleWithCSS: boolean\r\n                    linkImgCallback: Function\r\n                    onSelectionChange: Function\r\n                \r\n                    placeholder: string\r\n                    zIndexFullScreen: number\r\n                    showFullScreen: boolean\r\n                    showLinkImg: boolean //隐藏插入网络图片的功能 设置 editor.config.showLinkImg = false 即可隐藏插入网络图片的功能，即只保留上传本地图片。\r\n                    showLinkImgAlt: boolean\r\n                    showLinkImgHref: boolean // 配置超链接\r\n                    uploadImgAccept: string[] //限制类型\r\n                    uploadImgServer: string //配置上传的服务器接口\r\n                    uploadImgShowBase64: boolean // 使用 base64 格式保存图片\r\n                    uploadImgMaxSize: number //限制大小，比如2M 2 * 1024 * 1024\r\n                    uploadImgMaxLength: number //限制一次最多能传几张图片 默认为 100 张\r\n                    uploadFileName: string\r\n                    uploadImgParams: DicType\r\n                    uploadImgParamsWithUrl: boolean\r\n                    uploadImgHeaders: DicType\r\n                    uploadImgHooks: UploadImageHooksType\r\n                    uploadImgTimeout: number\r\n                    withCredentials: boolean\r\n                    customUploadImg: Function | null\r\n                    uploadImgFromMedia: Function | null\r\n                    customAlert: Function\r\n                \r\n                    onCatalogChange: Function | null\r\n                \r\n                    lang: string\r\n                    languages: typeof langConfig\r\n                \r\n                    linkCheck: Function\r\n                    linkImgCheck: Function\r\n                    compatibleMode: () => boolean\r\n                    historyMaxSize: number\r\n                \r\n                    focus: boolean\r\n                \r\n                    onlineVideoCheck: Function\r\n                    onlineVideoCallback: Function\r\n                \r\n                    showLinkVideo: Boolean\r\n                    uploadVideoAccept: string[] //限制视频类型\r\n                    uploadVideoServer: string //设置上传视频的服务器接口\r\n                    uploadVideoMaxSize: number //限制可以上传的视频大小\r\n                    uploadVideoName: string\r\n                    uploadVideoParams: DicType\r\n                    uploadVideoParamsWithUrl: boolean\r\n                    uploadVideoHeaders: DicType\r\n                    uploadVideoHooks: UploadVideoHooksType\r\n                    uploadVideoTimeout: number\r\n                    withVideoCredentials: boolean\r\n                    customUploadVideo: Function | null\r\n                    customInsertVideo: Function | null\r\n                \r\n                    menuTooltipPosition: tooltipPositionType\r\n                }\r\n                \r\n              `}</CodeView>\r\n\r\n              <div>代码样例</div>\r\n              <CodeView className=\"code-size\">\r\n              {`\r\n                    <LgRichEditor config={{showLinkImg: false, showLinkVideo: false, uploadVideoServer: \"http://localhost:3000/api\", excludeMenus: ['video']}} />\r\n              `}\r\n              </CodeView>\r\n            <LgRichEditor config={{showLinkImg: false, showLinkVideo: false, uploadVideoServer: \"http://localhost:3000/api\", excludeMenus: ['video'], onlineVideoCallback: () => {}}} />\r\n          </div>\r\n        )\r\n    }\r\n}","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 26291;\nmodule.exports = webpackEmptyContext;"],"names":["CodeView","prevProps","prevState","snapshot","window","PR","prettyPrint","result","prettier","this","props","children","parser","plugins","parserTypeScript","parserHtml","e","console","error","className","style","Component","defaultProps","language","LgRichEditor","Index","config","showLinkImg","showLinkVideo","uploadVideoServer","excludeMenus","onlineVideoCallback","webpackEmptyContext","req","Error","code","keys","resolve","id","module","exports"],"sourceRoot":""}