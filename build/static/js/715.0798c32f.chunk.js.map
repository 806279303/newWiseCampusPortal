{"version":3,"file":"static/js/715.0798c32f.chunk.js","mappings":"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","sources":["components/CodeView/index.tsx","webpack://web-public/./src/components/index.scss?fe14","components/index.ts","pages/AllSkinCover/index.tsx","components/breadcrumb/index.tsx","pages/breadcrumb/index.tsx","type/BaseComponent.ts","../node_modules/prettier|sync"],"sourcesContent":["import \"code-prettify\";\r\nimport \"code-prettify/src/prettify.css\";\r\n\r\nimport parserTypeScript from 'prettier/parser-typescript';\r\nimport prettier from 'prettier/standalone';\r\nimport parserHtml from \"prettier/parser-html\";\r\nimport {Component, CSSProperties} from \"react\";\r\nimport \"./index.scss\";\r\n\r\ninterface CodeViewProps {\r\n  children: string\r\n  className?: string\r\n  style?: CSSProperties\r\n  language?: \"ts\" | \"html\"\r\n}\r\n\r\nexport class CodeView extends Component<CodeViewProps, {}> {\r\n\r\n  static defaultProps: CodeViewProps = {\r\n    children: \"\",\r\n    language: \"ts\"\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Readonly<{}>, prevState: Readonly<{ selectedIndex: number }>, snapshot?: any) {\r\n    (window as any).PR.prettyPrint();\r\n  }\r\n\r\n  componentDidMount() {\r\n    (window as any).PR.prettyPrint();\r\n  }\r\n\r\n  render() {\r\n    let result = \"\";\r\n    try {\r\n      result = prettier.format(this.props.children, {\r\n        parser: \"typescript\",\r\n        plugins: [parserTypeScript, parserHtml]\r\n      });\r\n    } catch (e) {\r\n      console.error(\"代码格式有误，无法解析\")\r\n      result = this.props.children\r\n    }\r\n    return (\r\n      <pre className={`lg-code-view prettyprint lang-js ${this.props.className || \"\"}`} style={this.props.style}>\r\n          <div className=\"code_block\">\r\n            <code className=\"code_text\">{result}</code>\r\n          </div>\r\n      </pre>\r\n    )\r\n  }\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"allSkin\":\"\\\"lg-skin-s1\\\", \\\"lg-skin-s2\\\", \\\"lg-skin-s3\\\", \\\"lg-skin-s4\\\",\\\"lg-skin-s5\\\",\\\"lg-skin-k1\\\", \\\"lg-skin-k2\\\"\"};","import styles from \"./index.scss\";\r\n\r\nexport const allSkinClassName: string[] = JSON.parse(`[${styles.allSkin}]`);","import { Component, cloneElement } from \"react\";\r\nimport { allSkinClassName } from \"@/components/index\";\r\nimport { BaseProps } from \"../../type/BaseProps\";\r\n\r\nexport interface AllSkinCoverProps extends BaseProps {\r\n\r\n}\r\n\r\nexport class AllSkinCover extends Component<AllSkinCoverProps, {}>{\r\n  render() {\r\n    return (\r\n      <>\r\n        {\r\n          allSkinClassName.map((className, index) =>\r\n            <div key={index} className={`${className} ${this.props.className || ''}`} style={this.props.style}>\r\n              {this.props.children}\r\n            </div>\r\n          )\r\n        }\r\n      </>\r\n    )\r\n  }\r\n}","import \"./index.scss\"\r\nimport {BaseComponent} from \"../../type/BaseComponent\";\r\nimport {BaseProps} from \"../../type/BaseProps\";\r\n\r\nexport interface LgBreadcrumbProps extends LgBreadcrumbCommonProps {\r\n  type?: \"A\" | \"B\"\r\n}\r\n\r\nexport interface LgBreadcrumbCommonProps {\r\n  itemList: string[]\r\n  selectedIndex?: number\r\n  onChange?: (index: number) => void\r\n}\r\n\r\nexport const LgBreadcrumb = (props: LgBreadcrumbProps & BaseProps) => {\r\n  switch (props.type) {\r\n    case \"A\":\r\n      return <LgBreadcrumbA {...props} />\r\n    case \"B\":\r\n      return <LgBreadcrumbB {...props} />\r\n  }\r\n  return <LgBreadcrumbA {...props} />\r\n}\r\n\r\n\r\nclass LgBreadcrumbA extends BaseComponent<LgBreadcrumbCommonProps> {\r\n\r\n  onClick(index: number) {\r\n    const selectedIndex = this.getSelectedIndex()\r\n    index !== selectedIndex && this.props.onChange && this.props.onChange(index)\r\n  }\r\n\r\n  getSelectedIndex() {\r\n    if(!this.props.selectedIndex){\r\n      return 0\r\n    }\r\n    if(this.props.selectedIndex >= this.props.itemList.length){\r\n      return this.props.itemList.length - 1\r\n    }\r\n\r\n    return this.props.selectedIndex\r\n  }\r\n\r\n  render() {\r\n    const selectedIndex = this.getSelectedIndex()\r\n    return (\r\n      <div className={`lg-breadcrumb-a ${this.props.className || \"\"}`} style={this.props.style}>\r\n        <div className={`lg-breadcrumb-container`}>\r\n          {\r\n            this.props.itemList.length ?\r\n              this.props.itemList.map((item, index) =>\r\n                <div key={index} onClick={() => this.onClick(index)}\r\n                     className={`lg-breadcrumb-item ${index === selectedIndex ? \"selected\" : \"\"}`}>\r\n                  <div className=\"text\">{item}</div>\r\n                  {\r\n                    index === selectedIndex ? <div className=\"selected-background\"/> : \"\"\r\n                  }\r\n                </div>\r\n              )\r\n              : ''\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass LgBreadcrumbB extends BaseComponent<LgBreadcrumbCommonProps> {\r\n\r\n  getSelectedIndex() {\r\n    if(!this.props.selectedIndex || this.props.selectedIndex < 0){\r\n      return 0\r\n    }\r\n\r\n    if(this.props.selectedIndex >= this.props.itemList.length){\r\n      return this.props.itemList.length - 1\r\n    }\r\n\r\n    return this.props.selectedIndex\r\n  }\r\n\r\n  onClick(index: number) {\r\n    const selectedIndex = this.getSelectedIndex()\r\n    index !== selectedIndex && this.props.onChange && this.props.onChange(index)\r\n  }\r\n\r\n  render() {\r\n    const selectedIndex = this.getSelectedIndex()\r\n    return (\r\n      <div className={`lg-breadcrumb-b ${this.props.className || \"\"}`} style={this.props.style}>\r\n        <div className={` lg-breadcrumb-container`}>\r\n          {\r\n            this.props.itemList.length ? this.props.itemList.map((item, index) =>\r\n              <div key={index} onClick={() => this.onClick(index)}\r\n                   className={`lg-breadcrumb-item ${selectedIndex === index ? \"selected\" : \"\"}`}><div className=\"text\">{item}</div></div>) : ''\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import \"./index.scss\"\r\nimport {Component} from \"react\";\r\nimport {LgBreadcrumb} from \"@/components/breadcrumb\";\r\nimport {AllSkinCover} from \"../AllSkinCover\";\r\nimport {CodeView} from \"@/components/CodeView\";\r\n\r\nexport default class BreadcrumbPage extends Component<{}, { selectedIndex: number }> {\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.state = {\r\n      selectedIndex: 0\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"lg-breadcrumb-demo-page\">\r\n        <div>在页面文件中引入组件</div>\r\n        <CodeView className=\"code-size\">\r\n          {`\r\n               import {LgBreadcrumb} from \"@/components/breadcrumb\";\r\n            `}\r\n        </CodeView>\r\n\r\n        <div>标签属性详解</div>\r\n        <CodeView className=\"code-size\">\r\n          {`interface LgBreadcrumbProps{\r\n               type?:\"A\" | \"B\" // 款式选择，\"A\"、\"B\",可空，默认为A\r\n               itemList:string[] // 要显示的文字\r\n               selectedIndex?:number //设置当前选中的index,可空，默认为0\r\n               onChange?:(index: number) => void // 点击是触发，需要通过这个index参数修改selectedIndex，可空sfdsadasdfsfasdf\r\n               }\r\n            `}\r\n        </CodeView>\r\n\r\n        <div>A款锚点链接 样例代码</div>\r\n        <CodeView language=\"html\" className=\"code-size\">\r\n          {`\r\n              <LgBreadcrumb onChange={index => this.setState({selectedIndex: index})}\r\n                            selectedIndex={this.state.selectedIndex}\r\n                            itemList={[\"最新选项\", \"最新选项\", \"最新选项\", \"最新选项\", \"最新选项\", \"最新选项\"]}/>\r\n            `}\r\n        </CodeView>\r\n          <div className=\"lg-breadcrumb-demo-a\">\r\n            <AllSkinCover>\r\n              <LgBreadcrumb onChange={index => this.setState({selectedIndex: index})}\r\n                            selectedIndex={this.state.selectedIndex}\r\n                            itemList={[\"最新选项\", \"最新选项\", \"最新选项\", \"最新选项\", \"最新选项\", \"最新选项\"]}/>\r\n            </AllSkinCover>\r\n          </div>\r\n\r\n        <div>B款指定楼层 样例代码</div>\r\n        <CodeView language=\"html\" className=\"code-size\">\r\n          {`\r\n              <LgBreadcrumb type={\"B\"} onChange={index => this.setState({selectedIndex: index})}\r\n                            selectedIndex={this.state.selectedIndex} itemList={[\"F1\", \"F2\", \"F3\", 'F4', 'F5']}/>\r\n            `}\r\n        </CodeView>\r\n          <div className=\"lg-breadcrumb-demo-b\">\r\n            <AllSkinCover>\r\n              <LgBreadcrumb type={\"B\"} onChange={index => this.setState({selectedIndex: index})}\r\n                            selectedIndex={this.state.selectedIndex} itemList={[\"F1\", \"F2\", \"F3\", 'F4', 'F5']}/>\r\n            </AllSkinCover>\r\n          </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import {Component} from \"react\";\r\nimport {BaseProps} from \"./BaseProps\";\r\n\r\nexport class BaseComponent<T = {}, S = {}, SS = any> extends Component<T & BaseProps, S, SS>{\r\n  constructor(props: (T & BaseProps) | Readonly<T & BaseProps>) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.onRef && this.props.onRef(this)\r\n  }\r\n}","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 26291;\nmodule.exports = webpackEmptyContext;"],"names":["CodeView","prevProps","prevState","snapshot","window","PR","prettyPrint","result","prettier","this","props","children","parser","plugins","parserTypeScript","parserHtml","e","console","error","className","style","Component","defaultProps","language","allSkinClassName","JSON","parse","AllSkinCover","index","LgBreadcrumb","type","LgBreadcrumbA","LgBreadcrumbB","getSelectedIndex","onChange","selectedIndex","itemList","length","map","item","onClick","BaseComponent","BreadcrumbPage","state","setState","onRef","webpackEmptyContext","req","Error","code","keys","resolve","id","module","exports"],"sourceRoot":""}