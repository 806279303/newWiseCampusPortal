{"version":3,"file":"static/js/874.a78bbb54.chunk.js","mappings":"iSAgBaA,EAAb,sJAOE,SAAmBC,EAAyBC,EAAgDC,GACzFC,OAAeC,GAAGC,gBARvB,+BAWE,WACGF,OAAeC,GAAGC,gBAZvB,oBAeE,WACE,IAAIC,EAAS,GACb,IACEA,EAASC,IAAAA,OAAgBC,KAAKC,MAAMC,SAAU,CAC5CC,OAAQ,aACRC,QAAS,CAACC,IAAkBC,OAE9B,MAAOC,GACPC,QAAQC,MAAM,sEACdX,EAASE,KAAKC,MAAMC,SAEtB,OACE,gBAAKQ,UAAS,2CAAsCV,KAAKC,MAAMS,WAAa,IAAMC,MAAOX,KAAKC,MAAMU,MAApG,UACI,gBAAKD,UAAU,aAAf,UACE,iBAAMA,UAAU,YAAhB,SAA6BZ,YA7BzC,GAA8Bc,EAAAA,WAAjBrB,EAEJsB,aAA8B,CACnCX,SAAU,GACVY,SAAU,O,mECnBd,ICCaC,EAA6BC,KAAKC,MAAL,WDDhB,iGCCgB,O,iMCoC7BC,EAAb,0CAKM,WAAYjB,GAAoC,kCACxCA,GANd,qCAQM,WACI,OACE,gBAAKS,UAAS,6BAAwBV,KAAKC,MAAMS,WAAaC,MAAOX,KAAKC,MAAMU,MAAhF,UACI,SAAC,EAAAQ,MAAD,UAAUnB,KAAKC,cAX/B,GAAgCmB,EAAAA,GAAnBF,EACAL,aAAgC,CACrCQ,kBAAkB,G,aCnCpBC,EAAYC,EAAAA,KAAAA,UAQGC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACnB,WAAYvB,GAAY,IAAD,yBACrB,cAAMA,IACDwB,MAAQ,CACXC,KAAM,CAAC,CACLC,MAAO,iBACPC,QAAS,IACT1B,SAAU,CAAC,CACTyB,MAAO,mBACPC,QAAS,SAEV,CACDD,MAAO,iBACPC,QAAS,IACT1B,SAAU,CAAC,CACTyB,MAAO,mBACPC,QAAS,OACR,CACDD,MAAO,mBACPC,QAAS,UAGbC,QAAS,CACP3B,SAAU,WACVyB,MAAO,UAvBU,EA2HtB,OAjGA,8BAED,WAAU,IAAD,OACP,OACE,4BACI,uDACA,6GACA,SAACpC,EAAA,EAAD,CAAUmB,UAAU,YAApB,8GAKA,mDACA,SAACnB,EAAA,EAAD,CAAUmB,UAAU,YAApB,4+CAoBA,yDAEA,SAACnB,EAAA,EAAD,CAAUmB,UAAU,YAApB,22DA4CA,gBAAKC,MAAO,CAACmB,MAAO,KAApB,SAEIf,EAAAA,EAAAA,KAAqB,SAACL,EAAWqB,GAC/B,OAAO,gBAAKrB,UAAWA,EAAhB,UACL,SAACQ,EAAD,CACIc,gBAAiB,SAACC,GAASzB,QAAQ0B,IAAID,IACvCE,cAAe,SAACT,EAAMU,GAAa5B,QAAQ6B,KAAKX,EAAKU,IACrDV,KAAMJ,EAAU,EAAKG,MAAMC,MAC3BG,QAASP,EAAU,EAAKG,MAAMI,SAC9BS,gBAAgB,EAChBjB,kBAAkB,KAPeU,eAepD,EA5HkBP,CAA4BZ,EAAAA,Y,mHCVpCQ,EAAb,0CACE,WAAYnB,GAAmD,kCACvDA,GAFV,gDAKE,WACED,KAAKC,MAAMsC,OAASvC,KAAKC,MAAMsC,MAAMvC,UANzC,G,SAA6DY,Y,kBCH7D,SAAS4B,EAAoBC,GAC5B,IAAIlC,EAAI,IAAImC,MAAM,uBAAyBD,EAAM,KAEjD,MADAlC,EAAEoC,KAAO,mBACHpC,EAEPiC,EAAoBI,KAAO,WAAa,MAAO,IAC/CJ,EAAoBK,QAAUL,EAC9BA,EAAoBM,GAAK,MACzBC,EAAOC,QAAUR","sources":["components/CodeView/index.tsx","webpack://web-public/./src/components/index.scss?fe14","components/index.ts","components/treeselect/index.tsx","pages/treeselect/index.tsx","type/BaseComponent.ts","../node_modules/prettier|sync"],"sourcesContent":["import \"code-prettify\";\r\nimport \"code-prettify/src/prettify.css\";\r\n\r\nimport parserTypeScript from 'prettier/parser-typescript';\r\nimport prettier from 'prettier/standalone';\r\nimport parserHtml from \"prettier/parser-html\";\r\nimport {Component, CSSProperties} from \"react\";\r\nimport \"./index.scss\";\r\n\r\ninterface CodeViewProps {\r\n  children: string\r\n  className?: string\r\n  style?: CSSProperties\r\n  language?: \"ts\" | \"html\"\r\n}\r\n\r\nexport class CodeView extends Component<CodeViewProps, {}> {\r\n\r\n  static defaultProps: CodeViewProps = {\r\n    children: \"\",\r\n    language: \"ts\"\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Readonly<{}>, prevState: Readonly<{ selectedIndex: number }>, snapshot?: any) {\r\n    (window as any).PR.prettyPrint();\r\n  }\r\n\r\n  componentDidMount() {\r\n    (window as any).PR.prettyPrint();\r\n  }\r\n\r\n  render() {\r\n    let result = \"\";\r\n    try {\r\n      result = prettier.format(this.props.children, {\r\n        parser: \"typescript\",\r\n        plugins: [parserTypeScript, parserHtml]\r\n      });\r\n    } catch (e) {\r\n      console.error(\"代码格式有误，无法解析\")\r\n      result = this.props.children\r\n    }\r\n    return (\r\n      <pre className={`lg-code-view prettyprint lang-js ${this.props.className || \"\"}`} style={this.props.style}>\r\n          <div className=\"code_block\">\r\n            <code className=\"code_text\">{result}</code>\r\n          </div>\r\n      </pre>\r\n    )\r\n  }\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"allSkin\":\"\\\"lg-skin-s1\\\", \\\"lg-skin-s2\\\", \\\"lg-skin-s3\\\", \\\"lg-skin-s4\\\",\\\"lg-skin-s5\\\",\\\"lg-skin-k1\\\", \\\"lg-skin-k2\\\"\"};","import styles from \"./index.scss\";\r\n\r\nexport const allSkinClassName: string[] = JSON.parse(`[${styles.allSkin}]`);","\r\nimport './index.scss';\r\nimport React ,{Component, useState} from 'react';\r\nimport { Tree, Menu } from \"element-react\";\r\nimport { BaseComponent } from \"../../type/BaseComponent\";\r\n\r\ninterface TreeeselectProps{\r\n  autoExpandParent?: boolean\r\n  checkStrictly?: boolean\r\n  currentNodeKey?: any\r\n  defaultCheckedKeys?: any[]\r\n  defaultExpandedKeys?: any[]\r\n  defaultExpandAll?: boolean\r\n  data?: any[]\r\n  emptyText?: string\r\n  expandOnClickNode?: boolean\r\n  filterNodeMethod?(value?:any, data?: any, node?:any): boolean\r\n  renderContent?(nodeModel?:any, data?:any, store?:any): React.ReactElement<any>\r\n  isShowCheckbox?: boolean\r\n  accordion?: boolean\r\n  indent?: number,\r\n  nodeKey?: string\r\n  options?: {\r\n    children?: string\r\n    label?: string\r\n    icon?: string\r\n  },\r\n  lazy?: boolean\r\n  highlightCurrent?: boolean\r\n  load?(node?:any, resolve?:any): void\r\n  onCheckChange?(data?:any, checked?: boolean, indeterminate?:any): void\r\n  onNodeClicked?(data?:any, node?:any): void\r\n  onCurrentChange?(data?:any, node?:any): void\r\n  onNodeExpand?(data?:any, nodeModel?:any, node?:any): void\r\n  onNodeCollapse?(data?:any, nodeModel?:any, node?:any): void\r\n}\r\n\r\n\r\nexport class Treeselect extends BaseComponent<TreeeselectProps>{\r\n      static defaultProps:TreeeselectProps = {\r\n        highlightCurrent: true\r\n      }\r\n\r\n      constructor(props: Readonly<TreeeselectProps>) {\r\n        super(props);\r\n      }\r\n      render() {\r\n          return (\r\n            <div className={`lg-treeselect-area ${this.props.className}`} style={this.props.style}>\r\n                <Tree {...this.props}/>\r\n            </div>\r\n          )\r\n      }\r\n}\r\n\r\n\r\n","import React, {Component, useState} from 'react';\r\nimport {allSkinClassName} from \"@/components/index\";\r\nimport {Treeselect} from \"@/components/treeselect\";\r\nimport {CodeView} from \"@/components/CodeView\";\r\n\r\nconst cloneDeep = require('lodash').cloneDeep;\r\n\r\n\r\ninterface IState {\r\n  data: any,\r\n  options: any\r\n}\r\n\r\nexport default class TreeSelectComponent extends Component<{}, IState> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.state = {\r\n      data: [{\r\n        label: '一级 1',\r\n        nodeKey: '1',\r\n        children: [{\r\n          label: '二级 1-1',\r\n          nodeKey: '1-1',\r\n        }]\r\n      }, {\r\n        label: '一级 2',\r\n        nodeKey: '2',\r\n        children: [{\r\n          label: '二级 2-1',\r\n          nodeKey: '2-1'\r\n        }, {\r\n          label: '二级 2-2',\r\n          nodeKey: '2-2'\r\n        }]\r\n      }],\r\n      options: {\r\n        children: 'children',\r\n        label: 'label'\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n          <div>树形筛选</div>\r\n          <div>在页面文件中引入树筛选组件</div>\r\n          <CodeView className=\"code-size\">\r\n                  {`\r\n                      import {Treeselect} from \"@/components/treeselect\";\r\n                  `}\r\n          </CodeView>\r\n          <div> 配置项 </div>\r\n          <CodeView className=\"code-size\">{`       \r\n                    interface TreeselectProps {\r\n                    data?: any[], //配置项，lable要显示的文字信息，\r\n                                  children为子菜单，nodeKey表示选中的key值，必须唯一\r\n                    options?: {\r\n                      children?: string  //指定节点标签为节点对象的某个属性值\r\n                      label?: string    //指定子树为节点对象的某个属性值\r\n                      icon?: string\r\n                    },\r\n                    isShowCheckbox?: boolean,  //是否显示选择框\r\n                    highlightCurrent?: boolean, //鼠标经过时候是否有阴影\r\n                    onCurrentChange?(data?:any, node?:any) => void//当前选中节点变化时触发的事件\r\n                    onCheckChange?(data?:any, checked?: boolean, indeterminate?:any) => void // 节点选中状态发生变化时的回调\r\n\r\n                };\r\n                //在这仅显示比较常用的配置，更多配置请参考\r\n                //https://elemefe.github.io/element-react/#/zh-CN/tree\r\n                `}\r\n          </CodeView>\r\n\r\n          <div> 代码示例 </div>\r\n\r\n          <CodeView className=\"code-size\">\r\n                  {`\r\n                      class TreeSelectComponent extends Component<{}, IState> {\r\n                        constructor(props: {}) {\r\n                          super(props);\r\n                          this.state = {\r\n                            data: [{\r\n                              label: '一级 1',\r\n                              nodeKey: '1',\r\n                              children: [{\r\n                                label: '二级 1-1',\r\n                                nodeKey: '1-1',\r\n                              }]\r\n                            }, {\r\n                              label: '一级 2',\r\n                              nodeKey: '2',\r\n                              children: [{\r\n                                label: '二级 2-1',\r\n                                nodeKey: '2-1'\r\n                              }, {\r\n                                label: '二级 2-2',\r\n                                nodeKey: '2-2'\r\n                              }]\r\n                            }],\r\n                            options: {\r\n                              children: 'children',\r\n                              label: 'label'\r\n                            }\r\n                          }\r\n                        }\r\n                        render() {\r\n                          return (\r\n                              <Treeselect \r\n                                onCurrentChange={(value)=>{console.log(value)}}\r\n                                onCheckChange={(data, checked) => {console.warn(data,checked)}}\r\n                                data={cloneDeep(this.state.data)}\r\n                                options={cloneDeep(this.state.options)} \r\n                                isShowCheckbox={true}\r\n                                highlightCurrent={true})\r\n                        }\r\n                      }\r\n                  `}\r\n          </CodeView>\r\n          \r\n          <div style={{width: 300}}>\r\n            {\r\n              allSkinClassName.map((className, index) => {\r\n                return <div className={className} key={index}>\r\n                  <Treeselect \r\n                      onCurrentChange={(value)=>{console.log(value)}}\r\n                      onCheckChange={(data, checked) => {console.warn(data,checked)}}\r\n                      data={cloneDeep(this.state.data)}\r\n                      options={cloneDeep(this.state.options)} \r\n                      isShowCheckbox={true}\r\n                      highlightCurrent={true}/>\r\n                </div>\r\n              })\r\n            }\r\n\r\n          </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import {Component} from \"react\";\r\nimport {BaseProps} from \"./BaseProps\";\r\n\r\nexport class BaseComponent<T = {}, S = {}, SS = any> extends Component<T & BaseProps, S, SS>{\r\n  constructor(props: (T & BaseProps) | Readonly<T & BaseProps>) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.onRef && this.props.onRef(this)\r\n  }\r\n}","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 26291;\nmodule.exports = webpackEmptyContext;"],"names":["CodeView","prevProps","prevState","snapshot","window","PR","prettyPrint","result","prettier","this","props","children","parser","plugins","parserTypeScript","parserHtml","e","console","error","className","style","Component","defaultProps","language","allSkinClassName","JSON","parse","Treeselect","Tree","BaseComponent","highlightCurrent","cloneDeep","require","TreeSelectComponent","state","data","label","nodeKey","options","width","index","onCurrentChange","value","log","onCheckChange","checked","warn","isShowCheckbox","onRef","webpackEmptyContext","req","Error","code","keys","resolve","id","module","exports"],"sourceRoot":""}