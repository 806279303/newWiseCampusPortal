{"version":3,"file":"static/js/888.d9aa780e.chunk.js","mappings":"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","sources":["components/CodeView/index.tsx","components/inputNumber/index.tsx","pages/inputNumber/index.tsx","type/BaseComponent.ts","../node_modules/prettier|sync"],"sourcesContent":["import \"code-prettify\";\r\nimport \"code-prettify/src/prettify.css\";\r\n\r\nimport parserTypeScript from 'prettier/parser-typescript';\r\nimport prettier from 'prettier/standalone';\r\nimport parserHtml from \"prettier/parser-html\";\r\nimport {Component, CSSProperties} from \"react\";\r\nimport \"./index.scss\";\r\n\r\ninterface CodeViewProps {\r\n  children: string\r\n  className?: string\r\n  style?: CSSProperties\r\n  language?: \"ts\" | \"html\"\r\n}\r\n\r\nexport class CodeView extends Component<CodeViewProps, {}> {\r\n\r\n  static defaultProps: CodeViewProps = {\r\n    children: \"\",\r\n    language: \"ts\"\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Readonly<{}>, prevState: Readonly<{ selectedIndex: number }>, snapshot?: any) {\r\n    (window as any).PR.prettyPrint();\r\n  }\r\n\r\n  componentDidMount() {\r\n    (window as any).PR.prettyPrint();\r\n  }\r\n\r\n  render() {\r\n    let result = \"\";\r\n    try {\r\n      result = prettier.format(this.props.children, {\r\n        parser: \"typescript\",\r\n        plugins: [parserTypeScript, parserHtml]\r\n      });\r\n    } catch (e) {\r\n      console.error(\"代码格式有误，无法解析\")\r\n      result = this.props.children\r\n    }\r\n    return (\r\n      <pre className={`lg-code-view prettyprint lang-js ${this.props.className || \"\"}`} style={this.props.style}>\r\n          <div className=\"code_block\">\r\n            <code className=\"code_text\">{result}</code>\r\n          </div>\r\n      </pre>\r\n    )\r\n  }\r\n}\r\n","import { BaseProps } from \"../../type/BaseProps\";\r\nimport {BaseComponent} from \"../../type/BaseComponent\"\r\nimport \"./index.scss\";\r\nimport classNames from \"classnames\";\r\n\r\nexport interface LgInputNumberProps extends BaseProps {\r\n    value?: number\r\n    step?: number | string\r\n    max?: number | string\r\n    min?: number | string\r\n    editable?: boolean\r\n    readonly?: boolean\r\n    disabled?: boolean\r\n    formatter?: Function\r\n    size?: 'large' | 'small'\r\n    controlsOutside?: boolean\r\n    onChange?(value?: any): void  \r\n    onFocus?(value?:any): void\r\n    onBlur?(value?:any): void\r\n}\r\nexport interface LgInputNumberState {\r\n    inputValue: string\r\n}\r\n\r\nexport const LgInputNumber = (props: LgInputNumberProps) => {\r\n    return <LgInput {...props} />\r\n}\r\nexport class LgInput extends BaseComponent<LgInputNumberProps,LgInputNumberState> { \r\n    constructor(props: LgInputNumberProps) {\r\n        super(props)\r\n        let tempValue = this.props.value || Number(this.props.min) || 1\r\n        if (tempValue < Number(this.props.min)) {\r\n            tempValue = Number(this.props.min)\r\n        }\r\n        if (tempValue > Number(this.props.max)) {\r\n            tempValue = Number(this.props.max) \r\n        }\r\n        this.state = {\r\n            inputValue: String(tempValue)\r\n        }\r\n    }\r\n    formatValue(value:string) : string {\r\n        let tempValue = this.state.inputValue\r\n        if (this.props.formatter) {\r\n            tempValue = this.props.formatter(tempValue)\r\n        }\r\n        return tempValue\r\n    }\r\n    add(a:number, b:number) : number{\r\n        var r1, r2, m;\r\n        try { r1 = a.toString().split(\".\")[1].length } catch (e) { r1 = 0 }\r\n        try { r2 = b.toString().split(\".\")[1].length } catch (e) { r2 = 0 }\r\n        m = Math.pow(10, Math.max(r1, r2))\r\n        return (a * m + b * m) / m\r\n    }\r\n    sub(a:number, b:number) : number{\r\n        var r1, r2, m;\r\n        try { r1 = a.toString().split(\".\")[1].length } catch (e) { r1 = 0 }\r\n        try { r2 = b.toString().split(\".\")[1].length } catch (e) { r2 = 0 }\r\n        m = Math.pow(10, Math.max(r1, r2))\r\n        return (a * m - b * m) / m\r\n    }\r\n    onUpClick() {\r\n        if (this.props.readonly || this.props.disabled) {\r\n            return\r\n        }\r\n        let num = parseFloat(this.state.inputValue)\r\n        if (!this.state.inputValue) {\r\n            this.setState({\r\n                inputValue: String(this.props.max || this.props.value || this.props.min || 1)\r\n            })\r\n        }else {\r\n            let step = parseFloat(String(this.props.step || 1))\r\n            let result = this.add(num,step)\r\n            if (this.props.max && result > Number(this.props.max)) {\r\n                return\r\n            }\r\n            this.setState({\r\n                inputValue: String(this.add(num,step))\r\n            })\r\n        }      \r\n        if (this.props.onChange) {\r\n            this.props.onChange(this.state.inputValue)  \r\n        }\r\n    }\r\n    onDownClick() {\r\n        if (this.props.readonly || this.props.disabled) {\r\n            return\r\n        }\r\n        if (!this.state.inputValue) {\r\n            this.setState({\r\n                inputValue: String(this.props.min || this.props.value || this.props.max || 1)\r\n            })\r\n        }else {\r\n            let num = parseFloat(this.state.inputValue)\r\n            let step = parseFloat(String(this.props.step || 1))\r\n            let result = this.sub(num,step)\r\n            if (this.props.min && result < Number(this.props.min)) {\r\n                return\r\n            }\r\n            this.setState({\r\n                inputValue: String(this.sub(num,step))\r\n            }) \r\n        } \r\n        if (this.props.onChange) {\r\n            this.props.onChange(this.state.inputValue)  \r\n        }\r\n    }\r\n    onInputChange(e: any) {   \r\n        var tempValue:string = e.target.value \r\n        if (tempValue === \"\") {\r\n            this.setState({\r\n                inputValue: \"\"\r\n            }) \r\n        }else {\r\n            tempValue = tempValue.replace(/[^\\-?\\d.]/g,'')\r\n            let numValue = parseFloat(tempValue)\r\n            if (numValue > 99999999999999999999999) {\r\n                tempValue = \"Infinity\"\r\n            }\r\n            if (numValue < -9999999999999999999999) {\r\n                tempValue = \"-Infinity\"\r\n            }\r\n            if (numValue > Number(this.props.max)) {\r\n                tempValue = String(this.props.max)\r\n            }\r\n            if (numValue < Number(this.props.min)) {\r\n                tempValue = String(this.props.min)\r\n            }\r\n            this.setState({\r\n                inputValue: tempValue\r\n            }) \r\n        }\r\n        \r\n    }\r\n    defineOnChange(e: any) {\r\n        if (this.props.onChange) {\r\n            this.props.onChange(e.target.value)\r\n        }\r\n    }\r\n    defineOnFocus(e: any) {\r\n        if (this.props.onFocus) {\r\n            this.props.onFocus(e)\r\n        }\r\n    }\r\n    render() {\r\n        let inputNumberClassName = classNames(\r\n            \"lancoo-input-number\",   \r\n            {\r\n                \"lancoo-input-number-controls-outside\": this.props.controlsOutside,\r\n                \"lancoo-input-number-disable\": this.props.disabled,\r\n                \"lancoo-input-number-small\": this.props.size === \"small\",\r\n                \"lancoo-input-number-large\": this.props.size === \"large\"\r\n            }\r\n        )\r\n        return (\r\n            <div className={inputNumberClassName}>\r\n                <div className=\"lancoo-input-number-wrap\">\r\n                    <span className={`lancoo-input-number-handle lancoo-input-number-handle-up ${this.props.max && parseInt(this.state.inputValue) >= Number(this.props.max) ? \"lancoo-input-number-handle-disable\":\"\"}`} onClick={this.onUpClick.bind(this)}>\r\n                        <span className=\"lancoo-input-number-handle-up-inner el-icon-arrow-up\">\r\n                        </span>\r\n                    </span>\r\n                    <span className={`lancoo-input-number-handle lancoo-input-number-handle-down ${this.props.min && parseInt(this.state.inputValue) <= Number(this.props.min) ? \"lancoo-input-number-handle-disable\":\"\"}`} onClick={this.onDownClick.bind(this)}>\r\n                        <span className=\"lancoo-input-number-handle-down-inner el-icon-arrow-down\">\r\n                        </span>\r\n                    </span>\r\n                </div>\r\n                <div className=\"lancoo-input-number-input-wrap\">\r\n                    <input autoComplete=\"off\"\r\n                        spellCheck=\"false\" \r\n                        placeholder=\"\" \r\n                        type=\"text\" \r\n                        className=\"lancoo-input-number-input\" \r\n                        disabled = {this.props.disabled} readOnly = {this.props.readonly || this.props.editable} \r\n                        value={this.formatValue(this.state.inputValue)} \r\n                        onInput={this.onInputChange.bind(this)} \r\n                        onChange={this.defineOnChange.bind(this)}\r\n                        onFocus={this.defineOnFocus.bind(this)}\r\n                        onBlur={this.props.onBlur?this.props.onBlur:()=>{}}/>\r\n                </div>\r\n                <div className={`lancoo-input-number-controls-outside-btn lancoo-input-number-controls-outside-down ${this.props.min && parseInt(this.state.inputValue) <= Number(this.props.min) ? \"lancoo-input-number-controls-outside-disable\":\"\"}`} onClick={this.onDownClick.bind(this)}>\r\n                    <i className=\"lancoo-input-number-controls-outside-down-inner el-icon-minus\"></i>\r\n                </div>\r\n                <div className={`lancoo-input-number-controls-outside-btn lancoo-input-number-controls-outside-up ${this.props.max && parseInt(this.state.inputValue) >= Number(this.props.max) ? \"lancoo-input-number-controls-outside-disable\":\"\"}`} onClick={this.onUpClick.bind(this)}>\r\n                    <i className=\"lancoo-input-number-controls-outside-up-inner el-icon-plus\"></i>\r\n                </div>                \r\n            </div>\r\n        )\r\n    }\r\n}","import {Component} from \"react\";\r\nimport {LgCard} from \"@/components/card\";\r\nimport \"./index.scss\";\r\nimport {BaseProps} from \"../../type/BaseProps\";\r\nimport {CodeView} from \"@/components/CodeView\";\r\nimport {LgInputNumber} from \"@/components/inputNumber\"\r\nimport { Button } from \"element-react\";\r\n\r\nexport interface LgInputNumberState {\r\n    disabled: boolean\r\n}\r\n\r\nexport default class InputNumber extends Component<{}, LgInputNumberState> {\r\n    constructor() {\r\n        super({})\r\n        this.state = {\r\n            disabled: false\r\n        }\r\n    }\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  testOnChange(value:any) {\r\n    alert(\"传递函数给onChange获取值\")\r\n  }\r\n\r\n  toggleDisabled() {\r\n    this.setState({\r\n        disabled: !this.state.disabled\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"lg-card-demo\">\r\n        <div>在页面文件中引入组件</div>\r\n        <CodeView className=\"code-size\">\r\n          {`\r\n               import {LgInputNumber} from \"@/components/inputNumber\"\r\n            `}\r\n        </CodeView>\r\n        <div>标签属性详解</div>\r\n        <CodeView className=\"code-size\">\r\n          {`\r\n            interface LgInputNumberProps extends BaseProps {\r\n                value?: number // 默认值\r\n                step?: number | string // 每次改变的数值,可以是小数\r\n                max?: number | string // 最大值\r\n                min?: number | string // 最小值\r\n                editable?: boolean // 是否可编辑,默认true\r\n                readonly?: boolean // 是否只读,默认false\r\n                disabled?: boolean // 是否禁用,默认false\r\n                formatter?: Function // 指定输入框展示值的格式\r\n                size?: 'large' | 'small' // 输入框尺寸,可选值large、small,默认正常尺寸\r\n                controlsOutside?: boolean // 按钮位置是否置于两侧\r\n                onChange?(value?: any): void // 数值改变时的回调,返回当前值\r\n                onFocus?(value?: any): void // 聚焦时触发\r\n                onBlur?(value?: any): void // 数值改变时的回调,返回当前值\r\n            }\r\n          `}\r\n        </CodeView>\r\n\r\n        <TypeCardFrame title=\"基本用法\" subtitle=\"可以通过输入、鼠标点击或键盘的上下键来改变数值大小。\" className=\"base-use\">\r\n            <LgInputNumber value={1} min={1} max={10}></LgInputNumber>\r\n            <CodeView className=\"code-size\">\r\n            {`\r\n            <>\r\n                // 代码示例\r\n                <LgInputNumber value={1} min={1} max={2}></LgInputNumber>\r\n            </>\r\n            `}\r\n        </CodeView>\r\n        </TypeCardFrame>\r\n\r\n        \r\n        <TypeCardFrame title=\"小数\" subtitle=\"通过设置step属性控制每次改变的精度。\" className=\"base-use\">\r\n            <LgInputNumber value={1} min={1} max={10} step={1.5}></LgInputNumber>\r\n            <CodeView className=\"code-size\">\r\n            {`\r\n            <>\r\n                // 代码示例\r\n                <LgInputNumber value={1} min={1} max={10} step={1.5}></LgInputNumber>\r\n            </>\r\n            `}\r\n        </CodeView>\r\n        </TypeCardFrame>\r\n\r\n        <TypeCardFrame title=\"格式化展示\" subtitle=\"通过 formatter 格式化数字,以展示具有具体含义的数据\" className=\"formatter-use\">\r\n            <div className=\"lg-formatter-input\">\r\n                <LgInputNumber\r\n                    value={1000}\r\n                    min={1000}\r\n                    max={2000}\r\n                    formatter={(value: any) =>\r\n                    `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n                    }\r\n                ></LgInputNumber>\r\n                <LgInputNumber\r\n                    value={100}\r\n                    min={1}\r\n                    max={2000}\r\n                    formatter={(value: any) =>\r\n                        `${value}%`\r\n                    }\r\n                ></LgInputNumber>\r\n            </div>\r\n            <CodeView className=\"code-size\">\r\n                {`\r\n                <>\r\n                    // 代码示例\r\n                    <LgInputNumber value={1000} min={1} max={2000} formatter={(value:any) => \\`$ \\${value}\\`.replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, ',')}></LgInputNumber>\r\n                    <LgInputNumber value={1} min={1} max={2000} formatter={(value:any) => \\`\\${value}%\\`}></LgInputNumber>\r\n                </>\r\n                `}\r\n            </CodeView>\r\n        </TypeCardFrame>\r\n\r\n        <TypeCardFrame title=\"尺寸\" subtitle=\"通过设置size属性为large和small将输入框设置为大和小尺寸,不设置为默认尺寸。\" className=\"size-use\">\r\n            <div className=\"lg-size-input\">\r\n                <LgInputNumber value={3} size=\"small\"></LgInputNumber>\r\n                <LgInputNumber value={3}></LgInputNumber>\r\n                <LgInputNumber value={3} size=\"large\"></LgInputNumber>\r\n            </div>\r\n            <CodeView className=\"code-size\">\r\n            {`\r\n                <>\r\n                // 代码示例\r\n                <LgInputNumber value={3} size=\"small\"></LgInputNumber>\r\n                <LgInputNumber value={3}></LgInputNumber>\r\n                <LgInputNumber value={3} size=\"large\"></LgInputNumber>\r\n                </>\r\n            `}\r\n            </CodeView>\r\n            <div className=\"lg-size-input\">\r\n                <LgInputNumber value={3} size=\"small\" controlsOutside></LgInputNumber>\r\n                <LgInputNumber value={3} controlsOutside></LgInputNumber>\r\n                <LgInputNumber value={3} size=\"large\" controlsOutside></LgInputNumber>\r\n            </div>\r\n            <CodeView className=\"code-size\">\r\n            {`\r\n                <>\r\n                // 代码示例\r\n                <LgInputNumber value={3} size=\"small\" controlsOutside></LgInputNumber>\r\n                <LgInputNumber value={3} controlsOutside></LgInputNumber>\r\n                <LgInputNumber value={3} size=\"large\" controlsOutside></LgInputNumber>\r\n                </>\r\n            `}\r\n            </CodeView>\r\n        </TypeCardFrame>\r\n\r\n        <TypeCardFrame title=\"不可用\" subtitle=\"通过设置disabled属性禁用输入框,点击按钮切换状态。\" className=\"disabled-use\">\r\n            <div className=\"lg-disabled-input\">\r\n                <LgInputNumber value={666} disabled={this.state.disabled}></LgInputNumber>\r\n                <div className=\"lg-disabled-buttom\">\r\n                    <Button type=\"primary\" onClick={this.toggleDisabled.bind(this)}>禁用转换</Button>\r\n                </div>\r\n            </div>\r\n            <CodeView className=\"code-size\">\r\n            {`\r\n                <>\r\n                // 代码示例\r\n                <LgInputNumber value={666} disabled></LgInputNumber>\r\n                </>\r\n            `}\r\n            </CodeView>\r\n        </TypeCardFrame>\r\n\r\n        <TypeCardFrame title=\"只读\" subtitle=\"通过设置readonly属性开启只读。\" className=\"base-use\">\r\n            <LgInputNumber value={5} readonly></LgInputNumber>\r\n            <CodeView className=\"code-size\">\r\n            {`\r\n                <>\r\n                // 代码示例\r\n                <LgInputNumber value={5} readonly></LgInputNumber>\r\n                </>\r\n            `}\r\n            </CodeView>\r\n        </TypeCardFrame>\r\n\r\n        <TypeCardFrame title=\"不可编辑\" subtitle=\"通过设置editable属性控制是否能编辑。\" className=\"base-use\">\r\n            <LgInputNumber value={5} editable></LgInputNumber>\r\n            <CodeView className=\"code-size\">\r\n            {`\r\n                <>\r\n                // 代码示例\r\n                <LgInputNumber value={5} editable></LgInputNumber>\r\n                </>\r\n            `}\r\n            </CodeView>\r\n        </TypeCardFrame>\r\n\r\n        <TypeCardFrame title=\"按钮位置\" subtitle=\"通过设置 controls-outside 属性可以将按钮位置置于输入框两侧。\" className=\"base-use\">\r\n            <LgInputNumber value={5} controlsOutside></LgInputNumber>\r\n            <CodeView className=\"code-size\">\r\n            {`\r\n                <>\r\n                // 代码示例\r\n                <LgInputNumber value={5} controlsOutside></LgInputNumber>\r\n                </>\r\n            `}\r\n            </CodeView>\r\n        </TypeCardFrame>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\ninterface TypeCardFrameProps {\r\n  title: string\r\n  subtitle: string\r\n}\r\n\r\nconst TypeCardFrame = (props: TypeCardFrameProps & BaseProps) => {\r\n  return (\r\n    <div className={`card-frame ${props.className || \"\"}`}>\r\n      <div className=\"title\">{props.title}</div>\r\n      <div className=\"subtitle\">{props.subtitle}</div>\r\n      <div className=\"split-line\"/>\r\n      <div className=\"card-content\">\r\n        {\r\n          props.children\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}","import {Component} from \"react\";\r\nimport {BaseProps} from \"./BaseProps\";\r\n\r\nexport class BaseComponent<T = {}, S = {}, SS = any> extends Component<T & BaseProps, S, SS>{\r\n  constructor(props: (T & BaseProps) | Readonly<T & BaseProps>) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.onRef && this.props.onRef(this)\r\n  }\r\n}","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 26291;\nmodule.exports = webpackEmptyContext;"],"names":["CodeView","prevProps","prevState","snapshot","window","PR","prettyPrint","result","prettier","this","props","children","parser","plugins","parserTypeScript","parserHtml","e","console","error","className","style","Component","defaultProps","language","LgInputNumber","LgInput","tempValue","value","Number","min","max","state","inputValue","String","formatter","a","b","r1","r2","m","toString","split","length","Math","pow","readonly","disabled","num","parseFloat","step","add","setState","onChange","sub","target","replace","numValue","onFocus","inputNumberClassName","classNames","controlsOutside","size","parseInt","onClick","onUpClick","bind","onDownClick","autoComplete","spellCheck","placeholder","type","readOnly","editable","formatValue","onInput","onInputChange","defineOnChange","defineOnFocus","onBlur","BaseComponent","InputNumber","alert","TypeCardFrame","title","subtitle","Button","toggleDisabled","onRef","webpackEmptyContext","req","Error","code","keys","resolve","id","module","exports"],"sourceRoot":""}