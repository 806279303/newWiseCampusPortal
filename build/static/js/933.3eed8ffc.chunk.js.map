{"version":3,"file":"static/js/933.3eed8ffc.chunk.js","mappings":"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","sources":["components/CodeView/index.tsx","components/demoView/index.tsx","components/card/index.tsx","pages/card/index.tsx","pages/demoPage/index.tsx","type/BaseComponent.ts","../node_modules/prettier|sync"],"sourcesContent":["import \"code-prettify\";\r\nimport \"code-prettify/src/prettify.css\";\r\n\r\nimport parserTypeScript from 'prettier/parser-typescript';\r\nimport prettier from 'prettier/standalone';\r\nimport parserHtml from \"prettier/parser-html\";\r\nimport {Component, createRef, CSSProperties, RefObject} from \"react\";\r\nimport \"./index.scss\";\r\nimport classNames from \"classnames\";\r\n\r\ninterface CodeViewProps {\r\n  children: string\r\n  className?: string\r\n  style?: CSSProperties\r\n  language?: \"ts\" | \"html\"\r\n  defaultShow?: boolean\r\n  canHidden?: boolean\r\n}\r\n\r\n\r\ninterface CodeViewState {\r\n  isShowCode: boolean\r\n}\r\n\r\nexport class CodeView extends Component<CodeViewProps, CodeViewState> {\r\n\r\n  private readonly codeViewAreaRef: RefObject<HTMLDivElement>\r\n  private areaMaxHeight: string\r\n\r\n  static defaultProps: CodeViewProps = {\r\n    children: \"\",\r\n    language: \"ts\",\r\n    canHidden: false\r\n  }\r\n\r\n  constructor(props: CodeViewProps | Readonly<CodeViewProps>) {\r\n    super(props);\r\n    this.state = {\r\n      isShowCode: true\r\n    }\r\n    this.codeViewAreaRef = createRef<HTMLDivElement>();\r\n    this.areaMaxHeight = \"fit-content\"\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    (window as any).PR.prettyPrint();\r\n  }\r\n\r\n  componentDidMount() {\r\n    (window as any).PR.prettyPrint();\r\n    this.areaMaxHeight = this.codeViewAreaRef.current?.clientHeight + \"px\" || \"fit-content\"\r\n    this.setState({\r\n      isShowCode: !this.props.canHidden || !!this.props.defaultShow\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let result = \"\";\r\n    try {\r\n      result = prettier.format(this.props.children, {\r\n        parser: \"typescript\",\r\n        plugins: [parserTypeScript, parserHtml]\r\n      });\r\n    } catch (e) {\r\n      console.error(\"代码格式有误，无法解析\")\r\n      result = this.props.children\r\n    }\r\n\r\n    let className = classNames(\r\n      \"lg-code-view-root\",\r\n      {\r\n        [`${this.props.className}`]: !!this.props.className,\r\n        \"lg-code-view-can-hidden\": this.props.canHidden\r\n      }\r\n    )\r\n\r\n    return (\r\n      <div className={className} style={this.props.style}>\r\n        <div ref={this.codeViewAreaRef} className=\"lg-code-view-area\"\r\n             style={{height: this.state.isShowCode ? this.areaMaxHeight : \"0\"}}>\r\n          <pre className={`prettyprint lang-js`}>\r\n              <div className=\"code_block\">\r\n                <code className=\"code_text\">{result}</code>\r\n              </div>\r\n          </pre>\r\n        </div>\r\n        {\r\n          !this.props.canHidden ? \"\" :\r\n            <div onClick={() => this.setState({isShowCode: !this.state.isShowCode})}\r\n                 className=\"lg-code-view-show-button\">\r\n              <div className={`lg-code-view-show-text ${this.state.isShowCode ? \"on-show\" : \"\"}`}>\r\n                {!this.state.isShowCode ? \"显示\" : \"隐藏\"}代码\r\n              </div>\r\n            </div>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import \"./index.scss\"\r\nimport {BaseComponent} from \"../../type/BaseComponent\";\r\nimport classNames from \"classnames\";\r\nimport { BaseProps } from \"../../type/BaseProps\";\r\nimport {CodeView} from \"@/components/CodeView\";\r\n\r\n\r\nexport interface DemoViewProps {\r\n  title: string\r\n  subtitle?: string\r\n  code?: string\r\n}\r\n\r\nexport class DemoView extends BaseComponent<DemoViewProps> {\r\n\r\n  private readonly classNamePrefix: string\r\n\r\n  constructor(props: (DemoViewProps & BaseProps) | Readonly<DemoViewProps & BaseProps>) {\r\n    super(props);\r\n    this.classNamePrefix = \"lg-demo-view\"\r\n  }\r\n\r\n  render() {\r\n    let className = classNames(\r\n      `${this.classNamePrefix}-root`,\r\n      {\r\n        [`${this.props.className}`]: !!this.props.className\r\n      }\r\n    )\r\n    return (\r\n      <div className={className} style={this.props.style}>\r\n        <div className={`${this.classNamePrefix}-title`}>{this.props.title}</div>\r\n        {\r\n          !this.props.subtitle ? \"\" :\r\n            <div className={`${this.classNamePrefix}-subtitle`}>{this.props.subtitle}</div>\r\n        }\r\n        <div className={`${this.classNamePrefix}-component-area`}>\r\n          {\r\n            this.props.children\r\n          }\r\n        </div>\r\n        {\r\n          !this.props.code? \"\":\r\n            <CodeView canHidden={true}>{this.props.code}</CodeView>\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}","import \"./index.scss\";\r\nimport React from 'react';\r\nimport { Card } from 'element-react';\r\nimport {BaseComponent} from \"../../type/BaseComponent\"\r\nimport { BaseProps } from \"../../type/BaseProps\";\r\nimport classNames from \"classnames\";\r\n\r\nexport interface LgCardProps extends BaseProps {\r\n    headerContent?: string | React.ReactElement<any>\r\n    bodyStyle?: React.CSSProperties\r\n    shadow?: \"always\" | \"hover\" | \"never\"\r\n\r\n}\r\n\r\nexport const LgCard = (props: LgCardProps) => {\r\n    return <LgBaseCard {...props} />\r\n}\r\n\r\nexport class LgBaseCard extends BaseComponent<LgCardProps> {\r\n    render() {\r\n        const { className = '', style } = this.props\r\n        let shadow = this.props.shadow || \"always\"\r\n        let cardClassName = classNames(\r\n            \"box-card\",\r\n            `shadow-${shadow}`,\r\n            className,\r\n            {\r\n                [`${this.props.className}`]: !!this.props.className\r\n            }\r\n        )\r\n           \r\n        return (\r\n            <Card\r\n              className={cardClassName}\r\n              bodyStyle={this.props.bodyStyle}\r\n              style={style}\r\n              header={\r\n                this.props.headerContent\r\n              }\r\n            >\r\n                {\r\n                    this.props.children\r\n                }      \r\n            </Card>\r\n          )        \r\n      }\r\n  }","import {Component} from \"react\";\r\nimport {LgCard} from \"@/components/card\";\r\nimport \"./index.scss\";\r\nimport {BaseProps} from \"../../type/BaseProps\";\r\nimport {CodeView} from \"@/components/CodeView\";\r\nimport {Button} from 'element-react';\r\nimport cardImage from './img/beautiful.png'\r\nimport {DemoView} from \"@/components/demoView\";\r\nimport {DemoPage} from \"../demoPage\";\r\n\r\nexport default class Card extends Component<{}, {}> {\r\n\r\n  componentDidMount() {\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <DemoPage title=\"G027卡片\"\r\n                importCode={`\r\n                  import {LgCard} from \"@/components/card\";\r\n                `}\r\n                className=\"lg-card-demo\"\r\n                interfaceCode={`\r\n                  interface LgCardProps extends BaseProps {\r\n                    headerContent?: string | React.ReactElement<any> // 卡片标题内容，可空，可包含标题和操作按钮\r\n                    bodyStyle?: React.CSSProperties // 设置卡片内容的样式，可空\r\n                    shadow?: \"always\" | \"hover\" | \"never\" // 设置阴影显示的时机，默认为always\r\n                  }\r\n                `}>\r\n      <DemoView title=\"基本用法\" subtitle=\"简单的卡片状态，包含所需标题、操作和卡片内容。\" code={`\r\n          <LgCard headerContent={\r\n            <div className=\"clearfix\">\r\n              <span style={{ \"lineHeight\": \"36px\" }}>今日必做</span>\r\n              <span style={{ \"float\": \"right\" }}>\r\n                <Button type=\"primary\">新增卡片</Button>\r\n              </span>\r\n            </div>\r\n          } bodyStyle={{paddingTop:20,paddingBottom:10}}>\r\n            <div className=\"text item\">1 洗衣服</div>\r\n            <div className=\"text item\">2 做饭</div>\r\n            <div className=\"text item\">3 打篮球</div>\r\n            <div className=\"text item\">4 写作业</div>\r\n          </LgCard>\r\n      `}>\r\n          <LgCard headerContent={\r\n            <div className=\"clearfix\">\r\n              <span style={{ \"lineHeight\": \"36px\" }}>今日必做</span>\r\n              <span style={{ \"float\": \"right\" }}>\r\n                <Button type=\"primary\">新增卡片</Button>\r\n              </span>\r\n            </div>\r\n          } bodyStyle={{paddingTop:20,paddingBottom:10}}>\r\n            <div className=\"text item\">1 洗衣服</div>\r\n            <div className=\"text item\">2 做饭</div>\r\n            <div className=\"text item\">3 打篮球</div>\r\n            <div className=\"text item\">4 写作业</div>\r\n          </LgCard>\r\n      </DemoView>\r\n\r\n      <DemoView title=\"简单用法\" subtitle=\"只包含卡片内容，无标题和操作按钮\" code={`\r\n        <LgCard bodyStyle={{paddingTop:20,paddingBottom:10}}>\r\n          <div className=\"text item\">1 洗衣服</div>\r\n          <div className=\"text item\">2 做饭</div>\r\n          <div className=\"text item\">3 打篮球</div>\r\n          <div className=\"text item\">4 写作业</div>\r\n        </LgCard>\r\n      `}>\r\n          <LgCard bodyStyle={{paddingTop:20,paddingBottom:10}}>\r\n            <div className=\"text item\">1 洗衣服</div>\r\n            <div className=\"text item\">2 做饭</div>\r\n            <div className=\"text item\">3 打篮球</div>\r\n            <div className=\"text item\">4 写作业</div>\r\n          </LgCard>\r\n      </DemoView>\r\n\r\n      <DemoView title=\"带图片卡片\" subtitle=\"可进行更多丰富的内容展示\" code={`\r\n        <div>\r\n          <LgCard bodyStyle={{padding:0}} style={{width:200,display:\"inline-block\"}} className=\"img-card\">\r\n            <img src={cardImage} className=\"image\" alt=\"\"/>\r\n            <div style={{ padding: 14 }}>\r\n              <span>好看的女生</span>\r\n              <div className=\"bottom clearfix\">\r\n                <time className=\"time\">2016-10-21 16:19</time>\r\n                <Button type=\"text\" className=\"button\">操作按钮</Button>\r\n              </div>\r\n            </div>\r\n          </LgCard>\r\n          <LgCard bodyStyle={{padding:0}} style={{width:200,display:\"inline-block\",marginLeft:20}} className=\"img-card\">\r\n            <img src={cardImage} className=\"image\" alt=\"\"/>\r\n            <div style={{ padding: 14 }}>\r\n              <span>好看的女生</span>\r\n              <div className=\"bottom clearfix\">\r\n                <time className=\"time\">2016-10-21 16:19</time>\r\n                <Button type=\"text\" className=\"button\">操作按钮</Button>\r\n              </div>\r\n            </div>\r\n          </LgCard>\r\n        </div>\r\n      `}>\r\n          <div>\r\n            <LgCard bodyStyle={{padding:0}} style={{width:200,display:\"inline-block\"}} className=\"img-card\">\r\n              <img src={cardImage} className=\"image\" alt=\"\"/>\r\n              <div style={{ padding: 14 }}>\r\n                <span>好看的女生</span>\r\n                <div className=\"bottom clearfix\">\r\n                  <time className=\"time\">2016-10-21 16:19</time>\r\n                  <Button type=\"text\" className=\"button\">操作按钮</Button>\r\n                </div>\r\n              </div>\r\n            </LgCard>\r\n            <LgCard bodyStyle={{padding:0}} style={{width:200,display:\"inline-block\",marginLeft:20}} className=\"img-card\">\r\n              <img src={cardImage} className=\"image\" alt=\"\"/>\r\n              <div style={{ padding: 14 }}>\r\n                <span>好看的女生</span>\r\n                <div className=\"bottom clearfix\">\r\n                  <time className=\"time\">2016-10-21 16:19</time>\r\n                  <Button type=\"text\" className=\"button\">操作按钮</Button>\r\n                </div>\r\n              </div>\r\n            </LgCard>\r\n          </div>\r\n        </DemoView>\r\n\r\n        <DemoView title=\"卡片阴影\" subtitle=\"可以控制卡片的阴影\" code={`\r\n          <div>\r\n            <LgCard shadow=\"always\" style={{width:150,display:\"inline-block\"}} bodyStyle={{padding:8}}>总是显示</LgCard>\r\n            <LgCard shadow=\"hover\" style={{width:200,display:\"inline-block\",marginLeft:10}} bodyStyle={{padding:8}}>鼠标悬浮时显示</LgCard>\r\n            <LgCard shadow=\"never\" style={{width:150,display:\"inline-block\",marginLeft:10}} bodyStyle={{padding:8}}>从不显示</LgCard>\r\n          </div>\r\n        `\r\n        }\r\n        >\r\n          <div>\r\n            <LgCard shadow=\"always\" style={{width:150,display:\"inline-block\"}} bodyStyle={{padding:8}}>总是显示</LgCard>\r\n            <LgCard shadow=\"hover\" style={{width:200,display:\"inline-block\",marginLeft:10}} bodyStyle={{padding:8}}>鼠标悬浮时显示</LgCard>\r\n            <LgCard shadow=\"never\" style={{width:150,display:\"inline-block\",marginLeft:10}} bodyStyle={{padding:8}}>从不显示</LgCard>\r\n          </div>\r\n        </DemoView>\r\n      </DemoPage>\r\n    )\r\n  }\r\n}\r\n","import {BaseComponent} from \"../../type/BaseComponent\";\r\nimport {BaseProps} from \"../../type/BaseProps\";\r\nimport classNames from \"classnames\";\r\nimport \"./index.scss\"\r\nimport {CodeView} from \"@/components/CodeView\";\r\n\r\nexport interface DemoPageProps {\r\n  title: string\r\n  subtitle?: string\r\n  importCode?: string\r\n  interfaceCode?: string\r\n}\r\n\r\n\r\nexport class DemoPage extends BaseComponent<DemoPageProps> {\r\n\r\n  private readonly classNamePrefix: string\r\n\r\n  constructor(props: (DemoPageProps & BaseProps) | Readonly<DemoPageProps & BaseProps>) {\r\n    super(props);\r\n    this.classNamePrefix = \"lg-demo-page\"\r\n  }\r\n\r\n  render() {\r\n\r\n    const className = classNames(\r\n      `${this.classNamePrefix}-root`,\r\n      {\r\n        [`${this.props.className}`]: !!this.props.className\r\n      }\r\n    )\r\n\r\n    return (\r\n      <div className={className}>\r\n        <div className={`${this.classNamePrefix}-header`}>\r\n          <div className={`${this.classNamePrefix}-title`}>{this.props.title}</div>\r\n          {\r\n            !this.props.subtitle ? \"\" :\r\n              < div className={`${this.classNamePrefix}-subtitle`}>{this.props.subtitle}</div>\r\n          }\r\n          {\r\n            !this.props.importCode ? \"\" : (\r\n              <div className={`${this.classNamePrefix}-import`}>\r\n                <div className={`${this.classNamePrefix}-import-title`}>在页面中引入组件</div>\r\n                <CodeView>\r\n                  {this.props.importCode}\r\n                </CodeView>\r\n              </div>\r\n            )\r\n\r\n          }\r\n        </div>\r\n        <div className={`${this.classNamePrefix}-body`}>\r\n          {\r\n            this.props.children\r\n          }\r\n        </div>\r\n        <div className={`${this.classNamePrefix}-footer`}>\r\n          {\r\n            !this.props.interfaceCode ? \"\" : (\r\n              <div className={`${this.classNamePrefix}-interface`}>\r\n                <div className={`${this.classNamePrefix}-interface-title`}>标签属性解析</div>\r\n                <CodeView>\r\n                  {this.props.interfaceCode}\r\n                </CodeView>\r\n              </div>\r\n            )\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import {Component} from \"react\";\r\nimport {BaseProps} from \"./BaseProps\";\r\n\r\nexport class BaseComponent<T = {}, S = {}, SS = any> extends Component<T & BaseProps, S, SS>{\r\n  constructor(props: (T & BaseProps) | Readonly<T & BaseProps>) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.onRef && this.props.onRef(this)\r\n  }\r\n}","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 26291;\nmodule.exports = webpackEmptyContext;"],"names":["CodeView","props","codeViewAreaRef","areaMaxHeight","state","isShowCode","createRef","window","PR","prettyPrint","this","current","clientHeight","setState","canHidden","defaultShow","result","prettier","children","parser","plugins","parserTypeScript","parserHtml","e","console","error","className","classNames","style","ref","height","onClick","Component","defaultProps","language","DemoView","classNamePrefix","title","subtitle","code","BaseComponent","LgCard","LgBaseCard","shadow","cardClassName","Card","bodyStyle","header","headerContent","importCode","interfaceCode","Button","type","paddingTop","paddingBottom","padding","width","display","src","cardImage","alt","marginLeft","DemoPage","onRef","webpackEmptyContext","req","Error","keys","resolve","id","module","exports"],"sourceRoot":""}